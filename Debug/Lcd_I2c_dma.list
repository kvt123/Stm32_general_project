
Lcd_I2c_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002830  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002960  08002960  00003960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a0c  08002a0c  00004090  2**0
                  CONTENTS
  4 .ARM          00000000  08002a0c  08002a0c  00004090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a0c  08002a0c  00004090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a0c  08002a0c  00003a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a10  08002a10  00003a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002a14  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000090  08002aa4  00004090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08002aa4  00004308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005234  00000000  00000000  000040b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb1  00000000  00000000  000092ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0000aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000516  00000000  00000000  0000b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d502  00000000  00000000  0000bade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a85  00000000  00000000  00018fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000408e0  00000000  00000000  00020a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00061345  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f70  00000000  00000000  00061388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000632f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000090 	.word	0x20000090
 800014c:	00000000 	.word	0x00000000
 8000150:	08002948 	.word	0x08002948

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000094 	.word	0x20000094
 800016c:	08002948 	.word	0x08002948

08000170 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	6039      	str	r1, [r7, #0]
 800017a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000180:	2b00      	cmp	r3, #0
 8000182:	da0b      	bge.n	800019c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	b2da      	uxtb	r2, r3
 8000188:	490c      	ldr	r1, [pc, #48]	@ (80001bc <NVIC_SetPriority+0x4c>)
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	f003 030f 	and.w	r3, r3, #15
 8000190:	3b04      	subs	r3, #4
 8000192:	0112      	lsls	r2, r2, #4
 8000194:	b2d2      	uxtb	r2, r2
 8000196:	440b      	add	r3, r1
 8000198:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800019a:	e009      	b.n	80001b0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800019c:	683b      	ldr	r3, [r7, #0]
 800019e:	b2da      	uxtb	r2, r3
 80001a0:	4907      	ldr	r1, [pc, #28]	@ (80001c0 <NVIC_SetPriority+0x50>)
 80001a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a6:	0112      	lsls	r2, r2, #4
 80001a8:	b2d2      	uxtb	r2, r2
 80001aa:	440b      	add	r3, r1
 80001ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	e000ed00 	.word	0xe000ed00
 80001c0:	e000e100 	.word	0xe000e100

080001c4 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80001d2:	d301      	bcc.n	80001d8 <SysTick_Config+0x14>
 80001d4:	2301      	movs	r3, #1
 80001d6:	e011      	b.n	80001fc <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80001de:	4a09      	ldr	r2, [pc, #36]	@ (8000204 <SysTick_Config+0x40>)
 80001e0:	3b01      	subs	r3, #1
 80001e2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80001e4:	210f      	movs	r1, #15
 80001e6:	f04f 30ff 	mov.w	r0, #4294967295
 80001ea:	f7ff ffc1 	bl	8000170 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ee:	4b05      	ldr	r3, [pc, #20]	@ (8000204 <SysTick_Config+0x40>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 80001f4:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <SysTick_Config+0x40>)
 80001f6:	2207      	movs	r2, #7
 80001f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80001fa:	2300      	movs	r3, #0
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	e000e010 	.word	0xe000e010

08000208 <Init_LCD>:
#include "app.h"

void Init_LCD()
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* timer initialize */
    if (SysTick_Config(SystemCoreClock / 1000))
 800020c:	4b09      	ldr	r3, [pc, #36]	@ (8000234 <Init_LCD+0x2c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a09      	ldr	r2, [pc, #36]	@ (8000238 <Init_LCD+0x30>)
 8000212:	fba2 2303 	umull	r2, r3, r2, r3
 8000216:	099b      	lsrs	r3, r3, #6
 8000218:	4618      	mov	r0, r3
 800021a:	f7ff ffd3 	bl	80001c4 <SysTick_Config>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <Init_LCD+0x20>
    { 
      /* Capture error */ 
      while (1);
 8000224:	bf00      	nop
 8000226:	e7fd      	b.n	8000224 <Init_LCD+0x1c>
    }
    I2c_Midderware_Init();
 8000228:	f001 f992 	bl	8001550 <I2c_Midderware_Init>
    lcd_init();
 800022c:	f001 f8ec 	bl	8001408 <lcd_init>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	2000003c 	.word	0x2000003c
 8000238:	10624dd3 	.word	0x10624dd3

0800023c <RTC_Init>:
char buffer1[100] = { 0 };

const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

void RTC_Init(RTC_InitDefaultTypeDef* DefaultValue)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  /* Start DS1307 timing. Pass user I2C handle pointer to function. */
	DS1307_Init(RTC_I2C);
 8000244:	4816      	ldr	r0, [pc, #88]	@ (80002a0 <RTC_Init+0x64>)
 8000246:	f001 fbb9 	bl	80019bc <DS1307_Init>
	/* To test leap year correction. */
	DS1307_SetTimeZone(+7, 00);
 800024a:	2100      	movs	r1, #0
 800024c:	2007      	movs	r0, #7
 800024e:	f001 fd47 	bl	8001ce0 <DS1307_SetTimeZone>
	DS1307_SetDate(DefaultValue->RTC_Date);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fcb4 	bl	8001bc4 <DS1307_SetDate>
	DS1307_SetMonth(DefaultValue->RTC_Month);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	785b      	ldrb	r3, [r3, #1]
 8000260:	4618      	mov	r0, r3
 8000262:	f001 fcc1 	bl	8001be8 <DS1307_SetMonth>
	DS1307_SetYear(DefaultValue->RTC_Year);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	789b      	ldrb	r3, [r3, #2]
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fcce 	bl	8001c0c <DS1307_SetYear>
	DS1307_SetDayOfWeek(DefaultValue->RTC_DayOfWeek);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	78db      	ldrb	r3, [r3, #3]
 8000274:	4618      	mov	r0, r3
 8000276:	f001 fc93 	bl	8001ba0 <DS1307_SetDayOfWeek>
	DS1307_SetHour(DefaultValue->RTC_Hour);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	791b      	ldrb	r3, [r3, #4]
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fcee 	bl	8001c60 <DS1307_SetHour>
	DS1307_SetMinute(DefaultValue->RTC_Minute);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	795b      	ldrb	r3, [r3, #5]
 8000288:	4618      	mov	r0, r3
 800028a:	f001 fcfe 	bl	8001c8a <DS1307_SetMinute>
	DS1307_SetSecond(DefaultValue->RTC_Second);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	799b      	ldrb	r3, [r3, #6]
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fd0b 	bl	8001cae <DS1307_SetSecond>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40005400 	.word	0x40005400

080002a4 <GetValueDisplay_RTC>:

void GetValueDisplay_RTC(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af04      	add	r7, sp, #16
    /* Get current date and time. */
    date = DS1307_GetDate();
 80002aa:	f001 fc05 	bl	8001ab8 <DS1307_GetDate>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b32      	ldr	r3, [pc, #200]	@ (800037c <GetValueDisplay_RTC+0xd8>)
 80002b4:	701a      	strb	r2, [r3, #0]
    month = DS1307_GetMonth();
 80002b6:	f001 fc0b 	bl	8001ad0 <DS1307_GetMonth>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4b30      	ldr	r3, [pc, #192]	@ (8000380 <GetValueDisplay_RTC+0xdc>)
 80002c0:	701a      	strb	r2, [r3, #0]
    year = DS1307_GetYear();
 80002c2:	f001 fc11 	bl	8001ae8 <DS1307_GetYear>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000384 <GetValueDisplay_RTC+0xe0>)
 80002cc:	801a      	strh	r2, [r3, #0]
    dow = DS1307_GetDayOfWeek();
 80002ce:	f001 fbe7 	bl	8001aa0 <DS1307_GetDayOfWeek>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000388 <GetValueDisplay_RTC+0xe4>)
 80002d8:	701a      	strb	r2, [r3, #0]
    hour = DS1307_GetHour();
 80002da:	f001 fc26 	bl	8001b2a <DS1307_GetHour>
 80002de:	4603      	mov	r3, r0
 80002e0:	461a      	mov	r2, r3
 80002e2:	4b2a      	ldr	r3, [pc, #168]	@ (800038c <GetValueDisplay_RTC+0xe8>)
 80002e4:	701a      	strb	r2, [r3, #0]
    minute = DS1307_GetMinute();
 80002e6:	f001 fc2f 	bl	8001b48 <DS1307_GetMinute>
 80002ea:	4603      	mov	r3, r0
 80002ec:	461a      	mov	r2, r3
 80002ee:	4b28      	ldr	r3, [pc, #160]	@ (8000390 <GetValueDisplay_RTC+0xec>)
 80002f0:	701a      	strb	r2, [r3, #0]
    second = DS1307_GetSecond();
 80002f2:	f001 fc35 	bl	8001b60 <DS1307_GetSecond>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b26      	ldr	r3, [pc, #152]	@ (8000394 <GetValueDisplay_RTC+0xf0>)
 80002fc:	701a      	strb	r2, [r3, #0]
    zone_hr = DS1307_GetTimeZoneHour();
 80002fe:	f001 fc3e 	bl	8001b7e <DS1307_GetTimeZoneHour>
 8000302:	4603      	mov	r3, r0
 8000304:	461a      	mov	r2, r3
 8000306:	4b24      	ldr	r3, [pc, #144]	@ (8000398 <GetValueDisplay_RTC+0xf4>)
 8000308:	701a      	strb	r2, [r3, #0]
    zone_min = DS1307_GetTimeZoneMin();
 800030a:	f001 fc41 	bl	8001b90 <DS1307_GetTimeZoneMin>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b22      	ldr	r3, [pc, #136]	@ (800039c <GetValueDisplay_RTC+0xf8>)
 8000314:	701a      	strb	r2, [r3, #0]
    sprintf(buffer, "%04d-%02d-%02d %+03d:%02d",
 8000316:	4b1b      	ldr	r3, [pc, #108]	@ (8000384 <GetValueDisplay_RTC+0xe0>)
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	4b18      	ldr	r3, [pc, #96]	@ (8000380 <GetValueDisplay_RTC+0xdc>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	461c      	mov	r4, r3
 8000322:	4b16      	ldr	r3, [pc, #88]	@ (800037c <GetValueDisplay_RTC+0xd8>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	461a      	mov	r2, r3
 8000328:	4b1b      	ldr	r3, [pc, #108]	@ (8000398 <GetValueDisplay_RTC+0xf4>)
 800032a:	f993 3000 	ldrsb.w	r3, [r3]
 800032e:	4619      	mov	r1, r3
 8000330:	4b1a      	ldr	r3, [pc, #104]	@ (800039c <GetValueDisplay_RTC+0xf8>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	9302      	str	r3, [sp, #8]
 8000336:	9101      	str	r1, [sp, #4]
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	4623      	mov	r3, r4
 800033c:	4602      	mov	r2, r0
 800033e:	4918      	ldr	r1, [pc, #96]	@ (80003a0 <GetValueDisplay_RTC+0xfc>)
 8000340:	4818      	ldr	r0, [pc, #96]	@ (80003a4 <GetValueDisplay_RTC+0x100>)
 8000342:	f001 fe59 	bl	8001ff8 <siprintf>
            year, month, date, zone_hr, zone_min);

    sprintf(buffer1, "T%02d:%02d:%02d %s",
 8000346:	4b11      	ldr	r3, [pc, #68]	@ (800038c <GetValueDisplay_RTC+0xe8>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	4b10      	ldr	r3, [pc, #64]	@ (8000390 <GetValueDisplay_RTC+0xec>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	461c      	mov	r4, r3
 8000352:	4b10      	ldr	r3, [pc, #64]	@ (8000394 <GetValueDisplay_RTC+0xf0>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	461a      	mov	r2, r3
 8000358:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <GetValueDisplay_RTC+0xe4>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	4619      	mov	r1, r3
 800035e:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <GetValueDisplay_RTC+0x104>)
 8000360:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	9200      	str	r2, [sp, #0]
 8000368:	4623      	mov	r3, r4
 800036a:	4602      	mov	r2, r0
 800036c:	490f      	ldr	r1, [pc, #60]	@ (80003ac <GetValueDisplay_RTC+0x108>)
 800036e:	4810      	ldr	r0, [pc, #64]	@ (80003b0 <GetValueDisplay_RTC+0x10c>)
 8000370:	f001 fe42 	bl	8001ff8 <siprintf>
         hour, minute, second, DAYS_OF_WEEK[dow]);

}
 8000374:	bf00      	nop
 8000376:	3704      	adds	r7, #4
 8000378:	46bd      	mov	sp, r7
 800037a:	bd90      	pop	{r4, r7, pc}
 800037c:	200000ac 	.word	0x200000ac
 8000380:	200000ad 	.word	0x200000ad
 8000384:	200000ae 	.word	0x200000ae
 8000388:	200000b0 	.word	0x200000b0
 800038c:	200000b1 	.word	0x200000b1
 8000390:	200000b2 	.word	0x200000b2
 8000394:	200000b3 	.word	0x200000b3
 8000398:	200000b4 	.word	0x200000b4
 800039c:	200000b5 	.word	0x200000b5
 80003a0:	080029a4 	.word	0x080029a4
 80003a4:	200000b8 	.word	0x200000b8
 80003a8:	20000000 	.word	0x20000000
 80003ac:	080029c0 	.word	0x080029c0
 80003b0:	2000011c 	.word	0x2000011c

080003b4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	230f      	movs	r3, #15
 80003c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	78db      	ldrb	r3, [r3, #3]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d03a      	beq.n	8000446 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80003d0:	4b27      	ldr	r3, [pc, #156]	@ (8000470 <NVIC_Init+0xbc>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	43db      	mvns	r3, r3
 80003d6:	0a1b      	lsrs	r3, r3, #8
 80003d8:	f003 0307 	and.w	r3, r3, #7
 80003dc:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	f1c3 0304 	rsb	r3, r3, #4
 80003e4:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80003e6:	68fa      	ldr	r2, [r7, #12]
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	fa22 f303 	lsr.w	r3, r2, r3
 80003ee:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	785b      	ldrb	r3, [r3, #1]
 80003f4:	461a      	mov	r2, r3
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	789b      	ldrb	r3, [r3, #2]
 8000402:	461a      	mov	r2, r3
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	4013      	ands	r3, r2
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	4313      	orrs	r3, r2
 800040c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	011b      	lsls	r3, r3, #4
 8000412:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000414:	4a17      	ldr	r2, [pc, #92]	@ (8000474 <NVIC_Init+0xc0>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	6979      	ldr	r1, [r7, #20]
 800041c:	b2c9      	uxtb	r1, r1
 800041e:	4413      	add	r3, r2
 8000420:	460a      	mov	r2, r1
 8000422:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800042e:	4911      	ldr	r1, [pc, #68]	@ (8000474 <NVIC_Init+0xc0>)
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	7812      	ldrb	r2, [r2, #0]
 8000434:	0952      	lsrs	r2, r2, #5
 8000436:	b2d2      	uxtb	r2, r2
 8000438:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800043a:	2201      	movs	r2, #1
 800043c:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000440:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000444:	e00f      	b.n	8000466 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800044e:	4909      	ldr	r1, [pc, #36]	@ (8000474 <NVIC_Init+0xc0>)
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	0952      	lsrs	r2, r2, #5
 8000456:	b2d2      	uxtb	r2, r2
 8000458:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800045a:	2201      	movs	r2, #1
 800045c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800045e:	f100 0320 	add.w	r3, r0, #32
 8000462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000466:	bf00      	nop
 8000468:	371c      	adds	r7, #28
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	e000ed00 	.word	0xe000ed00
 8000474:	e000e100 	.word	0xe000e100

08000478 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000488:	4013      	ands	r3, r2
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a43      	ldr	r2, [pc, #268]	@ (80005b8 <DMA_DeInit+0x140>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 80004ae:	4b43      	ldr	r3, [pc, #268]	@ (80005bc <DMA_DeInit+0x144>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	4a42      	ldr	r2, [pc, #264]	@ (80005bc <DMA_DeInit+0x144>)
 80004b4:	f043 030f 	orr.w	r3, r3, #15
 80004b8:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 80004ba:	e077      	b.n	80005ac <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a40      	ldr	r2, [pc, #256]	@ (80005c0 <DMA_DeInit+0x148>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 80004c4:	4b3d      	ldr	r3, [pc, #244]	@ (80005bc <DMA_DeInit+0x144>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4a3c      	ldr	r2, [pc, #240]	@ (80005bc <DMA_DeInit+0x144>)
 80004ca:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80004ce:	6053      	str	r3, [r2, #4]
}
 80004d0:	e06c      	b.n	80005ac <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a3b      	ldr	r2, [pc, #236]	@ (80005c4 <DMA_DeInit+0x14c>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 80004da:	4b38      	ldr	r3, [pc, #224]	@ (80005bc <DMA_DeInit+0x144>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	4a37      	ldr	r2, [pc, #220]	@ (80005bc <DMA_DeInit+0x144>)
 80004e0:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 80004e4:	6053      	str	r3, [r2, #4]
}
 80004e6:	e061      	b.n	80005ac <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a37      	ldr	r2, [pc, #220]	@ (80005c8 <DMA_DeInit+0x150>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d106      	bne.n	80004fe <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 80004f0:	4b32      	ldr	r3, [pc, #200]	@ (80005bc <DMA_DeInit+0x144>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	4a31      	ldr	r2, [pc, #196]	@ (80005bc <DMA_DeInit+0x144>)
 80004f6:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 80004fa:	6053      	str	r3, [r2, #4]
}
 80004fc:	e056      	b.n	80005ac <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a32      	ldr	r2, [pc, #200]	@ (80005cc <DMA_DeInit+0x154>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d106      	bne.n	8000514 <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000506:	4b2d      	ldr	r3, [pc, #180]	@ (80005bc <DMA_DeInit+0x144>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	4a2c      	ldr	r2, [pc, #176]	@ (80005bc <DMA_DeInit+0x144>)
 800050c:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000510:	6053      	str	r3, [r2, #4]
}
 8000512:	e04b      	b.n	80005ac <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a2e      	ldr	r2, [pc, #184]	@ (80005d0 <DMA_DeInit+0x158>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d106      	bne.n	800052a <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 800051c:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <DMA_DeInit+0x144>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	4a26      	ldr	r2, [pc, #152]	@ (80005bc <DMA_DeInit+0x144>)
 8000522:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000526:	6053      	str	r3, [r2, #4]
}
 8000528:	e040      	b.n	80005ac <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a29      	ldr	r2, [pc, #164]	@ (80005d4 <DMA_DeInit+0x15c>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000532:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <DMA_DeInit+0x144>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	4a21      	ldr	r2, [pc, #132]	@ (80005bc <DMA_DeInit+0x144>)
 8000538:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 800053c:	6053      	str	r3, [r2, #4]
}
 800053e:	e035      	b.n	80005ac <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a25      	ldr	r2, [pc, #148]	@ (80005d8 <DMA_DeInit+0x160>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d106      	bne.n	8000556 <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000548:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <DMA_DeInit+0x164>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	4a23      	ldr	r2, [pc, #140]	@ (80005dc <DMA_DeInit+0x164>)
 800054e:	f043 030f 	orr.w	r3, r3, #15
 8000552:	6053      	str	r3, [r2, #4]
}
 8000554:	e02a      	b.n	80005ac <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a21      	ldr	r2, [pc, #132]	@ (80005e0 <DMA_DeInit+0x168>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d106      	bne.n	800056c <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 800055e:	4b1f      	ldr	r3, [pc, #124]	@ (80005dc <DMA_DeInit+0x164>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	4a1e      	ldr	r2, [pc, #120]	@ (80005dc <DMA_DeInit+0x164>)
 8000564:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000568:	6053      	str	r3, [r2, #4]
}
 800056a:	e01f      	b.n	80005ac <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a1d      	ldr	r2, [pc, #116]	@ (80005e4 <DMA_DeInit+0x16c>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d106      	bne.n	8000582 <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000574:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <DMA_DeInit+0x164>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	4a18      	ldr	r2, [pc, #96]	@ (80005dc <DMA_DeInit+0x164>)
 800057a:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 800057e:	6053      	str	r3, [r2, #4]
}
 8000580:	e014      	b.n	80005ac <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a18      	ldr	r2, [pc, #96]	@ (80005e8 <DMA_DeInit+0x170>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d106      	bne.n	8000598 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 800058a:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <DMA_DeInit+0x164>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	4a13      	ldr	r2, [pc, #76]	@ (80005dc <DMA_DeInit+0x164>)
 8000590:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000594:	6053      	str	r3, [r2, #4]
}
 8000596:	e009      	b.n	80005ac <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a14      	ldr	r2, [pc, #80]	@ (80005ec <DMA_DeInit+0x174>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d105      	bne.n	80005ac <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <DMA_DeInit+0x164>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	4a0d      	ldr	r2, [pc, #52]	@ (80005dc <DMA_DeInit+0x164>)
 80005a6:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 80005aa:	6053      	str	r3, [r2, #4]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40020008 	.word	0x40020008
 80005bc:	40020000 	.word	0x40020000
 80005c0:	4002001c 	.word	0x4002001c
 80005c4:	40020030 	.word	0x40020030
 80005c8:	40020044 	.word	0x40020044
 80005cc:	40020058 	.word	0x40020058
 80005d0:	4002006c 	.word	0x4002006c
 80005d4:	40020080 	.word	0x40020080
 80005d8:	40020408 	.word	0x40020408
 80005dc:	40020400 	.word	0x40020400
 80005e0:	4002041c 	.word	0x4002041c
 80005e4:	40020430 	.word	0x40020430
 80005e8:	40020444 	.word	0x40020444
 80005ec:	40020458 	.word	0x40020458

080005f0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800060a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800060e:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	6a1b      	ldr	r3, [r3, #32]
 8000618:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800061e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800062a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000636:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800063c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	4313      	orrs	r3, r2
 8000642:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	685a      	ldr	r2, [r3, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	60da      	str	r2, [r3, #12]
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */

  if (NewState != DISABLE)
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f043 0201 	orr.w	r2, r3, #1
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 800068a:	e006      	b.n	800069a <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000694:	4013      	ands	r3, r2
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	4613      	mov	r3, r2
 80006b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  if (NewState != DISABLE)
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d006      	beq.n	80006c6 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	431a      	orrs	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 80006c4:	e006      	b.n	80006d4 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR &= ~DMA_IT;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	43db      	mvns	r3, r3
 80006ce:	401a      	ands	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
	...

080006e0 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <DMA_GetFlagStatus+0x48>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	e002      	b.n	8000708 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <DMA_GetFlagStatus+0x4c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4013      	ands	r3, r2
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000712:	2301      	movs	r3, #1
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	e001      	b.n	800071c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	40020400 	.word	0x40020400
 800072c:	40020000 	.word	0x40020000

08000730 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d003      	beq.n	800074a <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <DMA_ClearFlag+0x2c>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8000748:	e002      	b.n	8000750 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 800074a:	4a05      	ldr	r2, [pc, #20]	@ (8000760 <DMA_ClearFlag+0x30>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6053      	str	r3, [r2, #4]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40020400 	.word	0x40020400
 8000760:	40020000 	.word	0x40020000

08000764 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000764:	b480      	push	{r7}
 8000766:	b089      	sub	sp, #36	@ 0x24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	78db      	ldrb	r3, [r3, #3]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	78db      	ldrb	r3, [r3, #3]
 8000794:	f003 0310 	and.w	r3, r3, #16
 8000798:	2b00      	cmp	r3, #0
 800079a:	d005      	beq.n	80007a8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	789b      	ldrb	r3, [r3, #2]
 80007a0:	461a      	mov	r2, r3
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d044      	beq.n	800083c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	e038      	b.n	8000830 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80007be:	2201      	movs	r2, #1
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d126      	bne.n	800082a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80007e2:	220f      	movs	r2, #15
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	43db      	mvns	r3, r3
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	4013      	ands	r3, r2
 80007f4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	4313      	orrs	r3, r2
 8000802:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	78db      	ldrb	r3, [r3, #3]
 8000808:	2b28      	cmp	r3, #40	@ 0x28
 800080a:	d105      	bne.n	8000818 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800080c:	2201      	movs	r2, #1
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	409a      	lsls	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	e008      	b.n	800082a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	78db      	ldrb	r3, [r3, #3]
 800081c:	2b48      	cmp	r3, #72	@ 0x48
 800081e:	d104      	bne.n	800082a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000820:	2201      	movs	r2, #1
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	409a      	lsls	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	3301      	adds	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	2b07      	cmp	r3, #7
 8000834:	d9c3      	bls.n	80007be <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	697a      	ldr	r2, [r7, #20]
 800083a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	2bff      	cmp	r3, #255	@ 0xff
 8000842:	d946      	bls.n	80008d2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	e03a      	b.n	80008c6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	3308      	adds	r3, #8
 8000854:	2201      	movs	r2, #1
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	429a      	cmp	r2, r3
 800086e:	d127      	bne.n	80008c0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000876:	220f      	movs	r2, #15
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	43db      	mvns	r3, r3
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	4013      	ands	r3, r2
 8000888:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800088a:	69fa      	ldr	r2, [r7, #28]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	4313      	orrs	r3, r2
 8000896:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	78db      	ldrb	r3, [r3, #3]
 800089c:	2b28      	cmp	r3, #40	@ 0x28
 800089e:	d105      	bne.n	80008ac <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	3308      	adds	r3, #8
 80008a4:	2201      	movs	r2, #1
 80008a6:	409a      	lsls	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	78db      	ldrb	r3, [r3, #3]
 80008b0:	2b48      	cmp	r3, #72	@ 0x48
 80008b2:	d105      	bne.n	80008c0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	3308      	adds	r3, #8
 80008b8:	2201      	movs	r2, #1
 80008ba:	409a      	lsls	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	3301      	adds	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	d9c1      	bls.n	8000850 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	605a      	str	r2, [r3, #4]
  }
}
 80008d2:	bf00      	nop
 80008d4:	3724      	adds	r7, #36	@ 0x24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  
  GPIOx->BSRR = GPIO_Pin;
 80008e8:	887a      	ldrh	r2, [r7, #2]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	611a      	str	r2, [r3, #16]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  
  GPIOx->BRR = GPIO_Pin;
 8000904:	887a      	ldrh	r2, [r7, #2]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	615a      	str	r2, [r3, #20]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000922:	2300      	movs	r3, #0
 8000924:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t result = 0x04;
 8000926:	2304      	movs	r3, #4
 8000928:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint32_t pclk1 = 8000000;
 800092a:	4b57      	ldr	r3, [pc, #348]	@ (8000a88 <I2C_Init+0x174>)
 800092c:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef  rcc_clocks;
  /* Check the parameters */

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	889b      	ldrh	r3, [r3, #4]
 8000932:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8000934:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000936:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800093a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fa4b 	bl	8000ddc <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	4a4f      	ldr	r2, [pc, #316]	@ (8000a8c <I2C_Init+0x178>)
 800094e:	fba2 2303 	umull	r2, r3, r2, r3
 8000952:	0c9b      	lsrs	r3, r3, #18
 8000954:	847b      	strh	r3, [r7, #34]	@ 0x22
  tmpreg |= freqrange;
 8000956:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000958:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800095a:	4313      	orrs	r3, r2
 800095c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000962:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b29b      	uxth	r3, r3
 800096a:	f023 0301 	bic.w	r3, r3, #1
 800096e:	b29a      	uxth	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a44      	ldr	r2, [pc, #272]	@ (8000a90 <I2C_Init+0x17c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d815      	bhi.n	80009ae <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	69fa      	ldr	r2, [r7, #28]
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000990:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000992:	2b03      	cmp	r3, #3
 8000994:	d801      	bhi.n	800099a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000996:	2304      	movs	r3, #4
 8000998:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800099a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800099c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800099e:	4313      	orrs	r3, r2
 80009a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80009a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80009a4:	3301      	adds	r3, #1
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	841a      	strh	r2, [r3, #32]
 80009ac:	e040      	b.n	8000a30 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	88db      	ldrh	r3, [r3, #6]
 80009b2:	f64b 72ff 	movw	r2, #49151	@ 0xbfff
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d109      	bne.n	80009ce <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	69fa      	ldr	r2, [r7, #28]
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80009cc:	e00e      	b.n	80009ec <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	009a      	lsls	r2, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	69fa      	ldr	r2, [r7, #28]
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80009e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 80009ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80009f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80009fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000a00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000a10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000a12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000a16:	fb02 f303 	mul.w	r3, r2, r3
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a94 <I2C_Init+0x180>)
 8000a1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a20:	1192      	asrs	r2, r2, #6
 8000a22:	17db      	asrs	r3, r3, #31
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000a34:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000a4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a4e:	f423 6381 	bic.w	r3, r3, #1032	@ 0x408
 8000a52:	f023 0302 	bic.w	r3, r3, #2
 8000a56:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	889a      	ldrh	r2, [r3, #4]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	895b      	ldrh	r3, [r3, #10]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000a66:	4313      	orrs	r3, r2
 8000a68:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000a6e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	899a      	ldrh	r2, [r3, #12]
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	891b      	ldrh	r3, [r3, #8]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	811a      	strh	r2, [r3, #8]
}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	@ 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	007a1200 	.word	0x007a1200
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	000186a0 	.word	0x000186a0
 8000a94:	10624dd3 	.word	0x10624dd3

08000a98 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8000aba:	e007      	b.n	8000acc <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f023 0301 	bic.w	r3, r3, #1
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	801a      	strh	r2, [r3, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d008      	beq.n	8000afa <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	889b      	ldrh	r3, [r3, #4]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
  }
}
 8000af8:	e007      	b.n	8000b0a <I2C_DMACmd+0x34>
    I2Cx->CR2 &= CR2_DMAEN_Reset;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	889b      	ldrh	r3, [r3, #4]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	809a      	strh	r2, [r3, #4]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d008      	beq.n	8000b38 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= CR2_LAST_Set;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	889b      	ldrh	r3, [r3, #4]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= CR2_LAST_Reset;
  }
}
 8000b36:	e007      	b.n	8000b48 <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 &= CR2_LAST_Reset;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	889b      	ldrh	r3, [r3, #4]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	809a      	strh	r2, [r3, #4]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d008      	beq.n	8000b76 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 8000b74:	e007      	b.n	8000b86 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	801a      	strh	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d008      	beq.n	8000bb4 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 8000bb2:	e007      	b.n	8000bc4 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	801a      	strh	r2, [r3, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d008      	beq.n	8000bf2 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8000bf0:	e007      	b.n	8000c02 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	801a      	strh	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	821a      	strh	r2, [r3, #16]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	8a1b      	ldrh	r3, [r3, #16]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	b2db      	uxtb	r3, r3
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
 8000c50:	4613      	mov	r3, r2
 8000c52:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000c54:	78bb      	ldrb	r3, [r7, #2]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	70fb      	strb	r3, [r7, #3]
 8000c62:	e003      	b.n	8000c6c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	821a      	strh	r2, [r3, #16]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b087      	sub	sp, #28
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000c94:	2300      	movs	r3, #0
 8000c96:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8a9b      	ldrh	r3, [r3, #20]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	8b1b      	ldrh	r3, [r3, #24]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000cb8:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d102      	bne.n	8000ccc <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	75fb      	strb	r3, [r7, #23]
 8000cca:	e001      	b.n	8000cd0 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	371c      	adds	r7, #28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b087      	sub	sp, #28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	0f1b      	lsrs	r3, r3, #28
 8000cfa:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000d02:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3314      	adds	r3, #20
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	e005      	b.n	8000d1e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3318      	adds	r3, #24
 8000d1c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	75fb      	strb	r3, [r7, #23]
 8000d2e:	e001      	b.n	8000d34 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	371c      	adds	r7, #28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <I2C_ClearFlag>:
  *     register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
  *     register  (I2C_SendData()).
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_Mask;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000d54:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	829a      	strh	r2, [r3, #20]
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  tmpreg = RCC->CFGR;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <RCC_HCLKConfig+0x34>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000d84:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <RCC_HCLKConfig+0x34>)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6053      	str	r3, [r2, #4]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  tmpreg = RCC->CFGR;
 8000db0:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <RCC_PCLK1Config+0x34>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000dbc:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <RCC_PCLK1Config+0x34>)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6053      	str	r3, [r2, #4]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000df4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f34 <RCC_GetClocksFreq+0x158>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 030c 	and.w	r3, r3, #12
 8000dfc:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d011      	beq.n	8000e28 <RCC_GetClocksFreq+0x4c>
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2b08      	cmp	r3, #8
 8000e08:	d83a      	bhi.n	8000e80 <RCC_GetClocksFreq+0xa4>
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <RCC_GetClocksFreq+0x3c>
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d004      	beq.n	8000e20 <RCC_GetClocksFreq+0x44>
 8000e16:	e033      	b.n	8000e80 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a47      	ldr	r2, [pc, #284]	@ (8000f38 <RCC_GetClocksFreq+0x15c>)
 8000e1c:	601a      	str	r2, [r3, #0]
      break;
 8000e1e:	e033      	b.n	8000e88 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a45      	ldr	r2, [pc, #276]	@ (8000f38 <RCC_GetClocksFreq+0x15c>)
 8000e24:	601a      	str	r2, [r3, #0]
      break;
 8000e26:	e02f      	b.n	8000e88 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000e28:	4b42      	ldr	r3, [pc, #264]	@ (8000f34 <RCC_GetClocksFreq+0x158>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000e30:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000e32:	4b40      	ldr	r3, [pc, #256]	@ (8000f34 <RCC_GetClocksFreq+0x158>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e3a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	0c9b      	lsrs	r3, r3, #18
 8000e40:	3302      	adds	r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d106      	bne.n	8000e58 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8000f3c <RCC_GetClocksFreq+0x160>)
 8000e4e:	fb03 f202 	mul.w	r2, r3, r2
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000e56:	e017      	b.n	8000e88 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000e58:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <RCC_GetClocksFreq+0x158>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d006      	beq.n	8000e72 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4a35      	ldr	r2, [pc, #212]	@ (8000f3c <RCC_GetClocksFreq+0x160>)
 8000e68:	fb03 f202 	mul.w	r2, r3, r2
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	601a      	str	r2, [r3, #0]
      break;
 8000e70:	e00a      	b.n	8000e88 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4a30      	ldr	r2, [pc, #192]	@ (8000f38 <RCC_GetClocksFreq+0x15c>)
 8000e76:	fb03 f202 	mul.w	r2, r3, r2
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	601a      	str	r2, [r3, #0]
      break;
 8000e7e:	e003      	b.n	8000e88 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a2d      	ldr	r2, [pc, #180]	@ (8000f38 <RCC_GetClocksFreq+0x15c>)
 8000e84:	601a      	str	r2, [r3, #0]
      break;
 8000e86:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000e88:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <RCC_GetClocksFreq+0x158>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000e90:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000e98:	4a29      	ldr	r2, [pc, #164]	@ (8000f40 <RCC_GetClocksFreq+0x164>)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	40da      	lsrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000eb0:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <RCC_GetClocksFreq+0x158>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000eb8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f40 <RCC_GetClocksFreq+0x164>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	40da      	lsrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <RCC_GetClocksFreq+0x158>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000ee0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	0adb      	lsrs	r3, r3, #11
 8000ee6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000ee8:	4a15      	ldr	r2, [pc, #84]	@ (8000f40 <RCC_GetClocksFreq+0x164>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	4413      	add	r3, r2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	40da      	lsrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <RCC_GetClocksFreq+0x158>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	0b9b      	lsrs	r3, r3, #14
 8000f0e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000f10:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <RCC_GetClocksFreq+0x168>)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	611a      	str	r2, [r3, #16]
}
 8000f2a:	bf00      	nop
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000
 8000f38:	007a1200 	.word	0x007a1200
 8000f3c:	003d0900 	.word	0x003d0900
 8000f40:	2000001c 	.word	0x2000001c
 8000f44:	2000002c 	.word	0x2000002c

08000f48 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */

  if (NewState != DISABLE)
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <RCC_AHBPeriphClockCmd+0x38>)
 8000f5c:	695a      	ldr	r2, [r3, #20]
 8000f5e:	4908      	ldr	r1, [pc, #32]	@ (8000f80 <RCC_AHBPeriphClockCmd+0x38>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000f66:	e006      	b.n	8000f76 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <RCC_AHBPeriphClockCmd+0x38>)
 8000f6a:	695a      	ldr	r2, [r3, #20]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	4903      	ldr	r1, [pc, #12]	@ (8000f80 <RCC_AHBPeriphClockCmd+0x38>)
 8000f72:	4013      	ands	r3, r2
 8000f74:	614b      	str	r3, [r1, #20]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000

08000f84 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <RCC_APB2PeriphClockCmd+0x38>)
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	4908      	ldr	r1, [pc, #32]	@ (8000fbc <RCC_APB2PeriphClockCmd+0x38>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000fa2:	e006      	b.n	8000fb2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <RCC_APB2PeriphClockCmd+0x38>)
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	4903      	ldr	r1, [pc, #12]	@ (8000fbc <RCC_APB2PeriphClockCmd+0x38>)
 8000fae:	4013      	ands	r3, r2
 8000fb0:	618b      	str	r3, [r1, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d006      	beq.n	8000fe0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <RCC_APB1PeriphClockCmd+0x38>)
 8000fd4:	69da      	ldr	r2, [r3, #28]
 8000fd6:	4908      	ldr	r1, [pc, #32]	@ (8000ff8 <RCC_APB1PeriphClockCmd+0x38>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000fde:	e006      	b.n	8000fee <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <RCC_APB1PeriphClockCmd+0x38>)
 8000fe2:	69da      	ldr	r2, [r3, #28]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4903      	ldr	r1, [pc, #12]	@ (8000ff8 <RCC_APB1PeriphClockCmd+0x38>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	61cb      	str	r3, [r1, #28]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000

08000ffc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <MemManage_Handler+0x4>

08001018 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <UsageFault_Handler+0x4>

08001028 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8001050:	f000 fa40 	bl	80014d4 <TimingDelay_Decrement>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <USART1_IRQHandler>:
  * @brief  This function handles USARTy global interrupt request.
  * @param  None
  * @retval None
  */
void USART1_IRQHandler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0


}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <USART2_IRQHandler>:
  * @brief  This function handles USARTz global interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <DMA1_Channel6_IRQHandler>:



void DMA1_Channel6_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */ 
  if(DMA_GetFlagStatus(I2C_DMA_FLAG_TX_TC) != RESET)
 8001074:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001078:	f7ff fb32 	bl	80006e0 <DMA_GetFlagStatus>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d029      	beq.n	80010d6 <DMA1_Channel6_IRQHandler+0x66>
  {  
    /* Disable the DMA Tx Channel and Clear all its Flags */  
    DMA_Cmd(I2C_DMA_CHANNEL_TX, DISABLE);
 8001082:	2100      	movs	r1, #0
 8001084:	4815      	ldr	r0, [pc, #84]	@ (80010dc <DMA1_Channel6_IRQHandler+0x6c>)
 8001086:	f7ff faf1 	bl	800066c <DMA_Cmd>
    DMA_ClearFlag(I2C_DMA_FLAG_TX_GL);
 800108a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800108e:	f7ff fb4f 	bl	8000730 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    Timeout = I2C_TIMEOUT;
 8001092:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <DMA1_Channel6_IRQHandler+0x70>)
 8001094:	22a0      	movs	r2, #160	@ 0xa0
 8001096:	701a      	strb	r2, [r3, #0]
    while(!I2C_GetFlagStatus(LCD_I2C, I2C_FLAG_BTF))
 8001098:	e00a      	b.n	80010b0 <DMA1_Channel6_IRQHandler+0x40>
    {
      if((Timeout--) == 0) TIMEOUT_UserCallback();
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <DMA1_Channel6_IRQHandler+0x70>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	b2d1      	uxtb	r1, r2
 80010a4:	4a0e      	ldr	r2, [pc, #56]	@ (80010e0 <DMA1_Channel6_IRQHandler+0x70>)
 80010a6:	7011      	strb	r1, [r2, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <DMA1_Channel6_IRQHandler+0x40>
 80010ac:	f000 fc64 	bl	8001978 <TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(LCD_I2C, I2C_FLAG_BTF))
 80010b0:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <DMA1_Channel6_IRQHandler+0x74>)
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <DMA1_Channel6_IRQHandler+0x78>)
 80010b4:	f7ff fe12 	bl	8000cdc <I2C_GetFlagStatus>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0ed      	beq.n	800109a <DMA1_Channel6_IRQHandler+0x2a>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(LCD_I2C, ENABLE);
 80010be:	2101      	movs	r1, #1
 80010c0:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <DMA1_Channel6_IRQHandler+0x78>)
 80010c2:	f7ff fd65 	bl	8000b90 <I2C_GenerateSTOP>
    
    /* Perform a read on SR1 and SR2 register to clear eventualaly pending flags */
    (void)LCD_I2C->SR1;
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <DMA1_Channel6_IRQHandler+0x78>)
 80010c8:	8a9b      	ldrh	r3, [r3, #20]
    (void)LCD_I2C->SR2;
 80010ca:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <DMA1_Channel6_IRQHandler+0x78>)
 80010cc:	8b1b      	ldrh	r3, [r3, #24]
    
    /* Reset the variable holding the number of data to be written */
    *DataWritePointer = 0;  
 80010ce:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <DMA1_Channel6_IRQHandler+0x7c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2200      	movs	r2, #0
 80010d4:	801a      	strh	r2, [r3, #0]
  }
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	4002006c 	.word	0x4002006c
 80010e0:	20000030 	.word	0x20000030
 80010e4:	10000004 	.word	0x10000004
 80010e8:	40005400 	.word	0x40005400
 80010ec:	200001b4 	.word	0x200001b4

080010f0 <DMA1_Channel7_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(I2C_DMA_FLAG_RX_TC) != RESET)
 80010f4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80010f8:	f7ff faf2 	bl	80006e0 <DMA_GetFlagStatus>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00f      	beq.n	8001122 <DMA1_Channel7_IRQHandler+0x32>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(LCD_I2C, ENABLE);    
 8001102:	2101      	movs	r1, #1
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <DMA1_Channel7_IRQHandler+0x38>)
 8001106:	f7ff fd43 	bl	8000b90 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Channel and Clear all its Flags */  
    DMA_Cmd(I2C_DMA_CHANNEL_RX, DISABLE);
 800110a:	2100      	movs	r1, #0
 800110c:	4807      	ldr	r0, [pc, #28]	@ (800112c <DMA1_Channel7_IRQHandler+0x3c>)
 800110e:	f7ff faad 	bl	800066c <DMA_Cmd>
    DMA_ClearFlag(I2C_DMA_FLAG_RX_GL);
 8001112:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8001116:	f7ff fb0b 	bl	8000730 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *DataReadPointer = 0;
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <DMA1_Channel7_IRQHandler+0x40>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	801a      	strh	r2, [r3, #0]
  }
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40005400 	.word	0x40005400
 800112c:	40020080 	.word	0x40020080
 8001130:	200001b0 	.word	0x200001b0

08001134 <LowLevel_DMAConfig>:


DMA_InitTypeDef   DMA_InitStructure; 

void LowLevel_DMAConfig(uint32_t* pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == DIRECTION_TX)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10d      	bne.n	8001162 <LowLevel_DMAConfig+0x2e>
  {
    /* Configure the DMA Tx Channel with the buffer address and the buffer size */
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4a0e      	ldr	r2, [pc, #56]	@ (8001184 <LowLevel_DMAConfig+0x50>)
 800114a:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;    
 800114c:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <LowLevel_DMAConfig+0x50>)
 800114e:	2210      	movs	r2, #16
 8001150:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 8001152:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <LowLevel_DMAConfig+0x50>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
    DMA_Init(I2C_DMA_CHANNEL_TX, &DMA_InitStructure);  
 8001158:	490a      	ldr	r1, [pc, #40]	@ (8001184 <LowLevel_DMAConfig+0x50>)
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <LowLevel_DMAConfig+0x54>)
 800115c:	f7ff fa48 	bl	80005f0 <DMA_Init>
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
    DMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
    DMA_Init(I2C_DMA_CHANNEL_RX, &DMA_InitStructure);    
  }
}
 8001160:	e00c      	b.n	800117c <LowLevel_DMAConfig+0x48>
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <LowLevel_DMAConfig+0x50>)
 8001166:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <LowLevel_DMAConfig+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 800116e:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <LowLevel_DMAConfig+0x50>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
    DMA_Init(I2C_DMA_CHANNEL_RX, &DMA_InitStructure);    
 8001174:	4903      	ldr	r1, [pc, #12]	@ (8001184 <LowLevel_DMAConfig+0x50>)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <LowLevel_DMAConfig+0x58>)
 8001178:	f7ff fa3a 	bl	80005f0 <DMA_Init>
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000180 	.word	0x20000180
 8001188:	4002006c 	.word	0x4002006c
 800118c:	40020080 	.word	0x40020080

08001190 <DMA_I2C_Init>:

void DMA_I2C_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* I2C TX DMA Channel configuration */
  DMA_DeInit(I2C_DMA_CHANNEL_TX);
 8001194:	481e      	ldr	r0, [pc, #120]	@ (8001210 <DMA_I2C_Init+0x80>)
 8001196:	f7ff f96f 	bl	8000478 <DMA_DeInit>
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)I2C_DR_Address;
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <DMA_I2C_Init+0x84>)
 800119c:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <DMA_I2C_Init+0x88>)
 800119e:	601a      	str	r2, [r3, #0]
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)0;   /* This parameter will be configured durig communication */
 80011a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;    /* This parameter will be configured durig communication */
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	609a      	str	r2, [r3, #8]
  DMA_InitStructure.DMA_BufferSize = 0xFFFF;            /* This parameter will be configured durig communication */
 80011ac:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b2:	60da      	str	r2, [r3, #12]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80011ba:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	615a      	str	r2, [r3, #20]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_MemoryDataSize_Byte;
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011d4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011dc:	2200      	movs	r2, #0
 80011de:	629a      	str	r2, [r3, #40]	@ 0x28
  DMA_Init(I2C_DMA_CHANNEL_TX, &DMA_InitStructure);  
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011e2:	480b      	ldr	r0, [pc, #44]	@ (8001210 <DMA_I2C_Init+0x80>)
 80011e4:	f7ff fa04 	bl	80005f0 <DMA_Init>
  
  /* I2C RX DMA Channel configuration */
  DMA_DeInit(I2C_DMA_CHANNEL_RX);
 80011e8:	480c      	ldr	r0, [pc, #48]	@ (800121c <DMA_I2C_Init+0x8c>)
 80011ea:	f7ff f945 	bl	8000478 <DMA_DeInit>
  DMA_Init(I2C_DMA_CHANNEL_RX, &DMA_InitStructure);  
 80011ee:	4909      	ldr	r1, [pc, #36]	@ (8001214 <DMA_I2C_Init+0x84>)
 80011f0:	480a      	ldr	r0, [pc, #40]	@ (800121c <DMA_I2C_Init+0x8c>)
 80011f2:	f7ff f9fd 	bl	80005f0 <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(I2C_DMA_CHANNEL_TX, DMA_IT_TC, ENABLE);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2102      	movs	r1, #2
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <DMA_I2C_Init+0x80>)
 80011fc:	f7ff fa52 	bl	80006a4 <DMA_ITConfig>
  DMA_ITConfig(I2C_DMA_CHANNEL_RX, DMA_IT_TC, ENABLE);    
 8001200:	2201      	movs	r2, #1
 8001202:	2102      	movs	r1, #2
 8001204:	4805      	ldr	r0, [pc, #20]	@ (800121c <DMA_I2C_Init+0x8c>)
 8001206:	f7ff fa4d 	bl	80006a4 <DMA_ITConfig>
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	4002006c 	.word	0x4002006c
 8001214:	20000180 	.word	0x20000180
 8001218:	40005410 	.word	0x40005410
 800121c:	40020080 	.word	0x40020080

08001220 <GPIO_I2C_Init>:
#include "Gpio_midderware.h"

static void I2C_BusRecovery();

void GPIO_I2C_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

    I2C_BusRecovery();
 8001226:	f000 f819 	bl	800125c <I2C_BusRecovery>
    GPIO_InitTypeDef  GPIO_InitStructure;
    /*!< GPIO configuration */  
    /*!< Configure I2C pins: SCL */
    GPIO_InitStructure.GPIO_Pin = I2C_SCL_PIN;
 800122a:	2340      	movs	r3, #64	@ 0x40
 800122c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800122e:	2303      	movs	r3, #3
 8001230:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8001232:	231c      	movs	r3, #28
 8001234:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4807      	ldr	r0, [pc, #28]	@ (8001258 <GPIO_I2C_Init+0x38>)
 800123c:	f7ff fa92 	bl	8000764 <GPIO_Init>

    /*!< Configure I2C pins: SDA */
    GPIO_InitStructure.GPIO_Pin = I2C_SDA_PIN;
 8001240:	2380      	movs	r3, #128	@ 0x80
 8001242:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(I2C_SDA_GPIO_PORT, &GPIO_InitStructure); 
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4803      	ldr	r0, [pc, #12]	@ (8001258 <GPIO_I2C_Init+0x38>)
 800124a:	f7ff fa8b 	bl	8000764 <GPIO_Init>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40010c00 	.word	0x40010c00

0800125c <I2C_BusRecovery>:





void I2C_BusRecovery() {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
    // Bước 1: Tắt I2C
    I2C_Cmd(I2C1, DISABLE);
 8001262:	2100      	movs	r1, #0
 8001264:	481d      	ldr	r0, [pc, #116]	@ (80012dc <I2C_BusRecovery+0x80>)
 8001266:	f7ff fc17 	bl	8000a98 <I2C_Cmd>
    // original_config.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    // original_config.GPIO_Mode = GPIO_Mode_AF_OD;
    // original_config.GPIO_Speed = GPIO_Speed_50MHz;
    
    // Bước 3: Chuyển tạm thời sang GPIO Output
    GPIO_InitTypeDef temp_config = {
 800126a:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <I2C_BusRecovery+0x84>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	603b      	str	r3, [r7, #0]
        .GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7,
        .GPIO_Mode = GPIO_Mode_Out_OD,
        .GPIO_Speed = GPIO_Speed_50MHz
    };
    GPIO_Init(GPIOB, &temp_config);
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	481b      	ldr	r0, [pc, #108]	@ (80012e4 <I2C_BusRecovery+0x88>)
 8001276:	f7ff fa75 	bl	8000764 <GPIO_Init>
    
    // Bước 4: Tạo 16 xung clock
    for(uint8_t i=0; i<16; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	e010      	b.n	80012a2 <I2C_BusRecovery+0x46>
        GPIO_SetBits(GPIOB, GPIO_Pin_6);  // SCL high
 8001280:	2140      	movs	r1, #64	@ 0x40
 8001282:	4818      	ldr	r0, [pc, #96]	@ (80012e4 <I2C_BusRecovery+0x88>)
 8001284:	f7ff fb2a 	bl	80008dc <GPIO_SetBits>
        Delay(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f000 f90f 	bl	80014ac <Delay>
        GPIO_ResetBits(GPIOB, GPIO_Pin_6); // SCL low
 800128e:	2140      	movs	r1, #64	@ 0x40
 8001290:	4814      	ldr	r0, [pc, #80]	@ (80012e4 <I2C_BusRecovery+0x88>)
 8001292:	f7ff fb31 	bl	80008f8 <GPIO_ResetBits>
        Delay(1);
 8001296:	2001      	movs	r0, #1
 8001298:	f000 f908 	bl	80014ac <Delay>
    for(uint8_t i=0; i<16; i++) {
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	3301      	adds	r3, #1
 80012a0:	71fb      	strb	r3, [r7, #7]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d9eb      	bls.n	8001280 <I2C_BusRecovery+0x24>
    }
    
    // Bước 5: Tạo điều kiện STOP
    GPIO_SetBits(GPIOB, GPIO_Pin_7);      // SDA high
 80012a8:	2180      	movs	r1, #128	@ 0x80
 80012aa:	480e      	ldr	r0, [pc, #56]	@ (80012e4 <I2C_BusRecovery+0x88>)
 80012ac:	f7ff fb16 	bl	80008dc <GPIO_SetBits>
    GPIO_SetBits(GPIOB, GPIO_Pin_6);      // SCL high
 80012b0:	2140      	movs	r1, #64	@ 0x40
 80012b2:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <I2C_BusRecovery+0x88>)
 80012b4:	f7ff fb12 	bl	80008dc <GPIO_SetBits>
    Delay(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f000 f8f7 	bl	80014ac <Delay>
    GPIO_ResetBits(GPIOB, GPIO_Pin_7);    // SDA low
 80012be:	2180      	movs	r1, #128	@ 0x80
 80012c0:	4808      	ldr	r0, [pc, #32]	@ (80012e4 <I2C_BusRecovery+0x88>)
 80012c2:	f7ff fb19 	bl	80008f8 <GPIO_ResetBits>
    Delay(1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f000 f8f0 	bl	80014ac <Delay>
    GPIO_ResetBits(GPIOB, GPIO_Pin_6);    // SCL low
 80012cc:	2140      	movs	r1, #64	@ 0x40
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <I2C_BusRecovery+0x88>)
 80012d0:	f7ff fb12 	bl	80008f8 <GPIO_ResetBits>
    // Bước 7: Reset phần cứng I2C
    // RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    // RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
    // I2C_Init(I2C1, &I2C_InitStructure);
    // I2C_Cmd(I2C1, ENABLE);
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40005400 	.word	0x40005400
 80012e0:	080029d4 	.word	0x080029d4
 80012e4:	40010c00 	.word	0x40010c00

080012e8 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(char cmd)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f023 030f 	bic.w	r3, r3, #15
 80012f8:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	f043 030c 	orr.w	r3, r3, #12
 8001306:	b2db      	uxtb	r3, r3
 8001308:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	b2db      	uxtb	r3, r3
 8001312:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	f043 030c 	orr.w	r3, r3, #12
 800131a:	b2db      	uxtb	r3, r3
 800131c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	b2db      	uxtb	r3, r3
 8001326:	72fb      	strb	r3, [r7, #11]

    I2C_write(LCD_I2C ,I2C_LCD_ADDRESS7, data_t, 4);
 8001328:	f107 0208 	add.w	r2, r7, #8
 800132c:	2304      	movs	r3, #4
 800132e:	2127      	movs	r1, #39	@ 0x27
 8001330:	4803      	ldr	r0, [pc, #12]	@ (8001340 <lcd_send_cmd+0x58>)
 8001332:	f000 f93d 	bl	80015b0 <I2C_write>
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40005400 	.word	0x40005400

08001344 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(char data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f023 030f 	bic.w	r3, r3, #15
 8001354:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	f043 030d 	orr.w	r3, r3, #13
 8001362:	b2db      	uxtb	r3, r3
 8001364:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	f043 0309 	orr.w	r3, r3, #9
 800136c:	b2db      	uxtb	r3, r3
 800136e:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8001370:	7bbb      	ldrb	r3, [r7, #14]
 8001372:	f043 030d 	orr.w	r3, r3, #13
 8001376:	b2db      	uxtb	r3, r3
 8001378:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	f043 0309 	orr.w	r3, r3, #9
 8001380:	b2db      	uxtb	r3, r3
 8001382:	72fb      	strb	r3, [r7, #11]

    I2C_write(LCD_I2C ,I2C_LCD_ADDRESS7, data_t, 4);
 8001384:	f107 0208 	add.w	r2, r7, #8
 8001388:	2304      	movs	r3, #4
 800138a:	2127      	movs	r1, #39	@ 0x27
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <lcd_send_data+0x5c>)
 800138e:	f000 f90f 	bl	80015b0 <I2C_write>
    Delay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f000 f88a 	bl	80014ac <Delay>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40005400 	.word	0x40005400

080013a4 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(int col, int row)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    uint8_t address;

    switch (row)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d824      	bhi.n	80013fe <lcd_gotoxy+0x5a>
 80013b4:	a201      	add	r2, pc, #4	@ (adr r2, 80013bc <lcd_gotoxy+0x18>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	080013cd 	.word	0x080013cd
 80013c0:	080013d7 	.word	0x080013d7
 80013c4:	080013e1 	.word	0x080013e1
 80013c8:	080013eb 	.word	0x080013eb
    {
        case 0: address = 0x80 + col; break;  // First row
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	3b80      	subs	r3, #128	@ 0x80
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e00e      	b.n	80013f4 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3b40      	subs	r3, #64	@ 0x40
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e009      	b.n	80013f4 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	3b6c      	subs	r3, #108	@ 0x6c
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e004      	b.n	80013f4 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	3b2c      	subs	r3, #44	@ 0x2c
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(address);  // Send command to move the cursor
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff76 	bl	80012e8 <lcd_send_cmd>
 80013fc:	e000      	b.n	8001400 <lcd_gotoxy+0x5c>
        default: return;  // Ignore invalid row numbers
 80013fe:	bf00      	nop
}
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop

08001408 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
    Delay(50);  // Wait for LCD power-up
 800140c:	2032      	movs	r0, #50	@ 0x32
 800140e:	f000 f84d 	bl	80014ac <Delay>
    lcd_send_cmd(0x30);  // Wake up command
 8001412:	2030      	movs	r0, #48	@ 0x30
 8001414:	f7ff ff68 	bl	80012e8 <lcd_send_cmd>
    Delay(5);
 8001418:	2005      	movs	r0, #5
 800141a:	f000 f847 	bl	80014ac <Delay>
    lcd_send_cmd(0x30);  // Wake up command
 800141e:	2030      	movs	r0, #48	@ 0x30
 8001420:	f7ff ff62 	bl	80012e8 <lcd_send_cmd>
    Delay(1);
 8001424:	2001      	movs	r0, #1
 8001426:	f000 f841 	bl	80014ac <Delay>
    lcd_send_cmd(0x30);  // Wake up command
 800142a:	2030      	movs	r0, #48	@ 0x30
 800142c:	f7ff ff5c 	bl	80012e8 <lcd_send_cmd>
    Delay(10);
 8001430:	200a      	movs	r0, #10
 8001432:	f000 f83b 	bl	80014ac <Delay>
    lcd_send_cmd(0x20);  // Set to 4-bit mode
 8001436:	2020      	movs	r0, #32
 8001438:	f7ff ff56 	bl	80012e8 <lcd_send_cmd>
    Delay(10);
 800143c:	200a      	movs	r0, #10
 800143e:	f000 f835 	bl	80014ac <Delay>

    // LCD configuration commands
    lcd_send_cmd(0x28);  // 4-bit mode, 2 lines, 5x8 font
 8001442:	2028      	movs	r0, #40	@ 0x28
 8001444:	f7ff ff50 	bl	80012e8 <lcd_send_cmd>
    Delay(1);
 8001448:	2001      	movs	r0, #1
 800144a:	f000 f82f 	bl	80014ac <Delay>
    lcd_send_cmd(0x08);  // Display off, cursor off, blink off
 800144e:	2008      	movs	r0, #8
 8001450:	f7ff ff4a 	bl	80012e8 <lcd_send_cmd>
    Delay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f000 f829 	bl	80014ac <Delay>
    lcd_send_cmd(0x01);  // Clear display
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff ff44 	bl	80012e8 <lcd_send_cmd>
    Delay(10);
 8001460:	200a      	movs	r0, #10
 8001462:	f000 f823 	bl	80014ac <Delay>
    lcd_send_cmd(0x06);  // Entry mode: cursor moves right
 8001466:	2006      	movs	r0, #6
 8001468:	f7ff ff3e 	bl	80012e8 <lcd_send_cmd>
    Delay(1);
 800146c:	2001      	movs	r0, #1
 800146e:	f000 f81d 	bl	80014ac <Delay>
    lcd_send_cmd(0x0C);  // Display on, cursor off, blink off
 8001472:	200c      	movs	r0, #12
 8001474:	f7ff ff38 	bl	80012e8 <lcd_send_cmd>
    Delay(1);
 8001478:	2001      	movs	r0, #1
 800147a:	f000 f817 	bl	80014ac <Delay>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}

08001482 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(char *str)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
    // uint16_t length = strlen(str);
    // for(uint16_t i = 0; i < length; i++)
    // {
    //     lcd_send_data(str[i]);
    // }
    while (*str) lcd_send_data(*str++);  // Send each character in the string
 800148a:	e006      	b.n	800149a <lcd_puts+0x18>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff55 	bl	8001344 <lcd_send_data>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f4      	bne.n	800148c <lcd_puts+0xa>

}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <Delay>:
}



void Delay(__IO uint32_t nTime)
{ 
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a06      	ldr	r2, [pc, #24]	@ (80014d0 <Delay+0x24>)
 80014b8:	6013      	str	r3, [r2, #0]

  while(TimingDelay != 0);
 80014ba:	bf00      	nop
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <Delay+0x24>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1fb      	bne.n	80014bc <Delay+0x10>
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	200001ac 	.word	0x200001ac

080014d4 <TimingDelay_Decrement>:
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <TimingDelay_Decrement+0x20>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <TimingDelay_Decrement+0x16>
  { 
    TimingDelay--;
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <TimingDelay_Decrement+0x20>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	4a03      	ldr	r2, [pc, #12]	@ (80014f4 <TimingDelay_Decrement+0x20>)
 80014e8:	6013      	str	r3, [r2, #0]
  }
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	200001ac 	.word	0x200001ac

080014f8 <__enable_irq>:
static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	b662      	cpsie	i
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <__disable_irq>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
 800150a:	b672      	cpsid	i
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <I2C_DMA_LowLevel_Init>:

void TIMEOUT_UserCallback(void);
static void HAL_Delay_ms(uint16_t delay);

static void I2C_DMA_LowLevel_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  RCC_HCLKConfig(RCC_SYSCLK_Div2);
 8001518:	2080      	movs	r0, #128	@ 0x80
 800151a:	f7ff fc27 	bl	8000d6c <RCC_HCLKConfig>
  RCC_PCLK1Config(RCC_HCLK_Div1);
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff fc40 	bl	8000da4 <RCC_PCLK1Config>
    
  /*!< I2C_SCL_GPIO_CLK and I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_APB2PeriphClockCmd(I2C_SCL_GPIO_CLK | I2C_SDA_GPIO_CLK, ENABLE);
 8001524:	2101      	movs	r1, #1
 8001526:	2008      	movs	r0, #8
 8001528:	f7ff fd2c 	bl	8000f84 <RCC_APB2PeriphClockCmd>

  /*!< I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(I2C_CLK, ENABLE);
 800152c:	2101      	movs	r1, #1
 800152e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001532:	f7ff fd45 	bl	8000fc0 <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  GPIO_I2C_Init();
 8001536:	f7ff fe73 	bl	8001220 <GPIO_I2C_Init>
 /* config interrupt TX, RX DMA for i2c */
  Nvic_I2C_DMA();
 800153a:	f000 fa21 	bl	8001980 <Nvic_I2C_DMA>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHBPeriphClockCmd(I2C_DMA_CLK, ENABLE);
 800153e:	2101      	movs	r1, #1
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fd01 	bl	8000f48 <RCC_AHBPeriphClockCmd>
  /* config DMA TX, RX channnel*/
  DMA_I2C_Init(); 
 8001546:	f7ff fe23 	bl	8001190 <DMA_I2C_Init>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <I2c_Midderware_Init>:


void I2c_Midderware_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
    I2C_InitTypeDef  I2C_InitStructure;
  
    I2C_DMA_LowLevel_Init();
 8001556:	f7ff ffdd 	bl	8001514 <I2C_DMA_LowLevel_Init>
    
    /*!< I2C configuration */
    /* I2C configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800155a:	2300      	movs	r3, #0
 800155c:	80bb      	strh	r3, [r7, #4]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800155e:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8001562:	80fb      	strh	r3, [r7, #6]
    I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
 8001564:	234e      	movs	r3, #78	@ 0x4e
 8001566:	813b      	strh	r3, [r7, #8]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156c:	817b      	strh	r3, [r7, #10]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800156e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001572:	81bb      	strh	r3, [r7, #12]
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <I2c_Midderware_Init+0x54>)
 8001576:	603b      	str	r3, [r7, #0]
    
    /* I2C Peripheral Enable */
    I2C_Cmd(LCD_I2C, ENABLE);
 8001578:	2101      	movs	r1, #1
 800157a:	480b      	ldr	r0, [pc, #44]	@ (80015a8 <I2c_Midderware_Init+0x58>)
 800157c:	f7ff fa8c 	bl	8000a98 <I2C_Cmd>
    /* Apply I2C configuration after enabling it */
    I2C_Init(LCD_I2C, &I2C_InitStructure);
 8001580:	463b      	mov	r3, r7
 8001582:	4619      	mov	r1, r3
 8001584:	4808      	ldr	r0, [pc, #32]	@ (80015a8 <I2c_Midderware_Init+0x58>)
 8001586:	f7ff f9c5 	bl	8000914 <I2C_Init>

    /* Enable the I2C peripheral DMA requests */
    I2C_DMACmd(LCD_I2C, ENABLE);
 800158a:	2101      	movs	r1, #1
 800158c:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <I2c_Midderware_Init+0x58>)
 800158e:	f7ff faa2 	bl	8000ad6 <I2C_DMACmd>
    /* clear BUS ERROR FLAG*/
    I2C_ClearFlag(LCD_I2C, I2C_FLAG_BERR);
 8001592:	4906      	ldr	r1, [pc, #24]	@ (80015ac <I2c_Midderware_Init+0x5c>)
 8001594:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <I2c_Midderware_Init+0x58>)
 8001596:	f7ff fbd3 	bl	8000d40 <I2C_ClearFlag>

}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	000186a0 	.word	0x000186a0
 80015a8:	40005400 	.word	0x40005400
 80015ac:	10000100 	.word	0x10000100

080015b0 <I2C_write>:

}


void I2C_write(I2C_TypeDef* i2c, uint8_t Device_Addr,  uint8_t* pBuffer, uint16_t NumByteToWrite)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	461a      	mov	r2, r3
 80015bc:	460b      	mov	r3, r1
 80015be:	72fb      	strb	r3, [r7, #11]
 80015c0:	4613      	mov	r3, r2
 80015c2:	813b      	strh	r3, [r7, #8]
    *DataWritePointer = NumByteToWrite;  
 80015c4:	4b35      	ldr	r3, [pc, #212]	@ (800169c <I2C_write+0xec>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	893a      	ldrh	r2, [r7, #8]
 80015ca:	801a      	strh	r2, [r3, #0]
  
  /*!< While the bus is busy */
  Timeout = I2C_TIMEOUT;
 80015cc:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <I2C_write+0xf0>)
 80015ce:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 80015d2:	801a      	strh	r2, [r3, #0]
  while(I2C_GetFlagStatus(i2c, I2C_FLAG_BUSY))
 80015d4:	e00b      	b.n	80015ee <I2C_write+0x3e>
  {
    if((Timeout--) == 0) return TIMEOUT_UserCallback();
 80015d6:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <I2C_write+0xf0>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	b291      	uxth	r1, r2
 80015e0:	4a2f      	ldr	r2, [pc, #188]	@ (80016a0 <I2C_write+0xf0>)
 80015e2:	8011      	strh	r1, [r2, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <I2C_write+0x3e>
 80015e8:	f000 f9c6 	bl	8001978 <TIMEOUT_UserCallback>
 80015ec:	e053      	b.n	8001696 <I2C_write+0xe6>
  while(I2C_GetFlagStatus(i2c, I2C_FLAG_BUSY))
 80015ee:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff fb72 	bl	8000cdc <I2C_GetFlagStatus>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1eb      	bne.n	80015d6 <I2C_write+0x26>
  }
  
  /*!< Send START condition */
  I2C_GenerateSTART(i2c, ENABLE);
 80015fe:	2101      	movs	r1, #1
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff faa6 	bl	8000b52 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it */
  Timeout = I2C_TIMEOUT;
 8001606:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <I2C_write+0xf0>)
 8001608:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 800160c:	801a      	strh	r2, [r3, #0]
  while(!I2C_CheckEvent(i2c, I2C_EVENT_MASTER_MODE_SELECT))
 800160e:	e00b      	b.n	8001628 <I2C_write+0x78>
  {
    if((Timeout--) == 0) return TIMEOUT_UserCallback();
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <I2C_write+0xf0>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	b29b      	uxth	r3, r3
 8001616:	1e5a      	subs	r2, r3, #1
 8001618:	b291      	uxth	r1, r2
 800161a:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <I2C_write+0xf0>)
 800161c:	8011      	strh	r1, [r2, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <I2C_write+0x78>
 8001622:	f000 f9a9 	bl	8001978 <TIMEOUT_UserCallback>
 8001626:	e036      	b.n	8001696 <I2C_write+0xe6>
  while(!I2C_CheckEvent(i2c, I2C_EVENT_MASTER_MODE_SELECT))
 8001628:	491e      	ldr	r1, [pc, #120]	@ (80016a4 <I2C_write+0xf4>)
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fb27 	bl	8000c7e <I2C_CheckEvent>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0ec      	beq.n	8001610 <I2C_write+0x60>
  }
  
  /*!< Send LCD address for write */
  Timeout = I2C_TIMEOUT;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <I2C_write+0xf0>)
 8001638:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 800163c:	801a      	strh	r2, [r3, #0]
  I2C_Send7bitAddress(i2c, Device_Addr << 1, I2C_Direction_Transmitter);
 800163e:	7afb      	ldrb	r3, [r7, #11]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff fafb 	bl	8000c44 <I2C_Send7bitAddress>

  /*!< Test on EV6 and clear it */
  Timeout = I2C_TIMEOUT;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <I2C_write+0xf0>)
 8001650:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 8001654:	801a      	strh	r2, [r3, #0]
  while(!I2C_CheckEvent(i2c, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001656:	e00b      	b.n	8001670 <I2C_write+0xc0>
  {
    if((Timeout--) == 0) return TIMEOUT_UserCallback();
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <I2C_write+0xf0>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	1e5a      	subs	r2, r3, #1
 8001660:	b291      	uxth	r1, r2
 8001662:	4a0f      	ldr	r2, [pc, #60]	@ (80016a0 <I2C_write+0xf0>)
 8001664:	8011      	strh	r1, [r2, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <I2C_write+0xc0>
 800166a:	f000 f985 	bl	8001978 <TIMEOUT_UserCallback>
 800166e:	e012      	b.n	8001696 <I2C_write+0xe6>
  while(!I2C_CheckEvent(i2c, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001670:	490d      	ldr	r1, [pc, #52]	@ (80016a8 <I2C_write+0xf8>)
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff fb03 	bl	8000c7e <I2C_CheckEvent>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0ec      	beq.n	8001658 <I2C_write+0xa8>
  }

  
  /* Configure the DMA Tx Channel with the buffer address and the buffer size */
  LowLevel_DMAConfig((uint32_t)pBuffer, (uint8_t)(NumByteToWrite), DIRECTION_TX);
 800167e:	893b      	ldrh	r3, [r7, #8]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2200      	movs	r2, #0
 8001684:	4619      	mov	r1, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fd54 	bl	8001134 <LowLevel_DMAConfig>
    
  /* Enable the DMA Tx Channel */
  DMA_Cmd(I2C_DMA_CHANNEL_TX, ENABLE);
 800168c:	2101      	movs	r1, #1
 800168e:	4807      	ldr	r0, [pc, #28]	@ (80016ac <I2C_write+0xfc>)
 8001690:	f7fe ffec 	bl	800066c <DMA_Cmd>
  
  /* If all operations OK, return STATUS_OK (0) */
  return STATUS_OK;
 8001694:	bf00      	nop

}
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200001b4 	.word	0x200001b4
 80016a0:	20000030 	.word	0x20000030
 80016a4:	00030001 	.word	0x00030001
 80016a8:	00070082 	.word	0x00070082
 80016ac:	4002006c 	.word	0x4002006c

080016b0 <I2C_Read>:



void I2C_Read(I2C_TypeDef* i2c, uint8_t Device_Addr, uint8_t* pBuffer, uint8_t RegAddr, uint16_t NumByteToRead)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	461a      	mov	r2, r3
 80016bc:	460b      	mov	r3, r1
 80016be:	72fb      	strb	r3, [r7, #11]
 80016c0:	4613      	mov	r3, r2
 80016c2:	72bb      	strb	r3, [r7, #10]
    Timeout = I2C_TIMEOUT;
 80016c4:	4b95      	ldr	r3, [pc, #596]	@ (800191c <I2C_Read+0x26c>)
 80016c6:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 80016ca:	801a      	strh	r2, [r3, #0]
    while(I2C_GetFlagStatus(i2c, I2C_FLAG_BUSY))
 80016cc:	e00b      	b.n	80016e6 <I2C_Read+0x36>
    {
      if((Timeout--) == 0) return TIMEOUT_UserCallback();
 80016ce:	4b93      	ldr	r3, [pc, #588]	@ (800191c <I2C_Read+0x26c>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	b291      	uxth	r1, r2
 80016d8:	4a90      	ldr	r2, [pc, #576]	@ (800191c <I2C_Read+0x26c>)
 80016da:	8011      	strh	r1, [r2, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <I2C_Read+0x36>
 80016e0:	f000 f94a 	bl	8001978 <TIMEOUT_UserCallback>
 80016e4:	e140      	b.n	8001968 <I2C_Read+0x2b8>
    while(I2C_GetFlagStatus(i2c, I2C_FLAG_BUSY))
 80016e6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff faf6 	bl	8000cdc <I2C_GetFlagStatus>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1eb      	bne.n	80016ce <I2C_Read+0x1e>
    }
      /*!< Send START condition */
    I2C_GenerateSTART(i2c, ENABLE);
 80016f6:	2101      	movs	r1, #1
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f7ff fa2a 	bl	8000b52 <I2C_GenerateSTART>
    Timeout = I2C_TIMEOUT;
 80016fe:	4b87      	ldr	r3, [pc, #540]	@ (800191c <I2C_Read+0x26c>)
 8001700:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 8001704:	801a      	strh	r2, [r3, #0]
    while(!I2C_GetFlagStatus(i2c, I2C_EVENT_MASTER_MODE_SELECT))
 8001706:	e00b      	b.n	8001720 <I2C_Read+0x70>
    {
      if((Timeout--) == 0) return TIMEOUT_UserCallback();
 8001708:	4b84      	ldr	r3, [pc, #528]	@ (800191c <I2C_Read+0x26c>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	1e5a      	subs	r2, r3, #1
 8001710:	b291      	uxth	r1, r2
 8001712:	4a82      	ldr	r2, [pc, #520]	@ (800191c <I2C_Read+0x26c>)
 8001714:	8011      	strh	r1, [r2, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <I2C_Read+0x70>
 800171a:	f000 f92d 	bl	8001978 <TIMEOUT_UserCallback>
 800171e:	e123      	b.n	8001968 <I2C_Read+0x2b8>
    while(!I2C_GetFlagStatus(i2c, I2C_EVENT_MASTER_MODE_SELECT))
 8001720:	497f      	ldr	r1, [pc, #508]	@ (8001920 <I2C_Read+0x270>)
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f7ff fada 	bl	8000cdc <I2C_GetFlagStatus>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0ec      	beq.n	8001708 <I2C_Read+0x58>
    }
    Delay(1);
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff febc 	bl	80014ac <Delay>
      /*!< Send address for write */
    I2C_Send7bitAddress(i2c, Device_Addr << 1, I2C_Direction_Transmitter);
 8001734:	7afb      	ldrb	r3, [r7, #11]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff fa80 	bl	8000c44 <I2C_Send7bitAddress>
    Timeout = I2C_TIMEOUT;
 8001744:	4b75      	ldr	r3, [pc, #468]	@ (800191c <I2C_Read+0x26c>)
 8001746:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 800174a:	801a      	strh	r2, [r3, #0]
    while(!I2C_GetFlagStatus(i2c, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 800174c:	e00b      	b.n	8001766 <I2C_Read+0xb6>
    {
      if((Timeout--) == 0) return TIMEOUT_UserCallback();
 800174e:	4b73      	ldr	r3, [pc, #460]	@ (800191c <I2C_Read+0x26c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	b291      	uxth	r1, r2
 8001758:	4a70      	ldr	r2, [pc, #448]	@ (800191c <I2C_Read+0x26c>)
 800175a:	8011      	strh	r1, [r2, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <I2C_Read+0xb6>
 8001760:	f000 f90a 	bl	8001978 <TIMEOUT_UserCallback>
 8001764:	e100      	b.n	8001968 <I2C_Read+0x2b8>
    while(!I2C_GetFlagStatus(i2c, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001766:	496f      	ldr	r1, [pc, #444]	@ (8001924 <I2C_Read+0x274>)
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fab7 	bl	8000cdc <I2C_GetFlagStatus>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ec      	beq.n	800174e <I2C_Read+0x9e>
    }

    Delay(1);
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fe99 	bl	80014ac <Delay>

    if (I2C_GetFlagStatus(i2c, I2C_FLAG_ADDR)) {
 800177a:	496b      	ldr	r1, [pc, #428]	@ (8001928 <I2C_Read+0x278>)
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f7ff faad 	bl	8000cdc <I2C_GetFlagStatus>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <I2C_Read+0xe8>
        volatile uint32_t temp = i2c->SR1;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8a9b      	ldrh	r3, [r3, #20]
 800178c:	b29b      	uxth	r3, r3
 800178e:	617b      	str	r3, [r7, #20]
        temp = i2c->SR2;  // Xóa cờ ADDR
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8b1b      	ldrh	r3, [r3, #24]
 8001794:	b29b      	uxth	r3, r3
 8001796:	617b      	str	r3, [r7, #20]
    }

    while (!I2C_GetFlagStatus(I2C1, I2C_FLAG_TXE)); // Đợi sẵn sàng
 8001798:	bf00      	nop
 800179a:	4964      	ldr	r1, [pc, #400]	@ (800192c <I2C_Read+0x27c>)
 800179c:	4864      	ldr	r0, [pc, #400]	@ (8001930 <I2C_Read+0x280>)
 800179e:	f7ff fa9d 	bl	8000cdc <I2C_GetFlagStatus>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f8      	beq.n	800179a <I2C_Read+0xea>


    /*!< Send the RTC's internal address to read from: LSB of the address */
    I2C_SendData(i2c, (uint8_t)(RegAddr & 0xFF));   
 80017a8:	7abb      	ldrb	r3, [r7, #10]
 80017aa:	4619      	mov	r1, r3
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff fa2d 	bl	8000c0c <I2C_SendData>

    Timeout = I2C_TIMEOUT;
 80017b2:	4b5a      	ldr	r3, [pc, #360]	@ (800191c <I2C_Read+0x26c>)
 80017b4:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 80017b8:	801a      	strh	r2, [r3, #0]
    while(I2C_GetFlagStatus(i2c, I2C_FLAG_BTF) == RESET)
 80017ba:	e00b      	b.n	80017d4 <I2C_Read+0x124>
    {
        if((Timeout--) == 0) return TIMEOUT_UserCallback();
 80017bc:	4b57      	ldr	r3, [pc, #348]	@ (800191c <I2C_Read+0x26c>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	1e5a      	subs	r2, r3, #1
 80017c4:	b291      	uxth	r1, r2
 80017c6:	4a55      	ldr	r2, [pc, #340]	@ (800191c <I2C_Read+0x26c>)
 80017c8:	8011      	strh	r1, [r2, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <I2C_Read+0x124>
 80017ce:	f000 f8d3 	bl	8001978 <TIMEOUT_UserCallback>
 80017d2:	e0c9      	b.n	8001968 <I2C_Read+0x2b8>
    while(I2C_GetFlagStatus(i2c, I2C_FLAG_BTF) == RESET)
 80017d4:	4957      	ldr	r1, [pc, #348]	@ (8001934 <I2C_Read+0x284>)
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f7ff fa80 	bl	8000cdc <I2C_GetFlagStatus>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0ec      	beq.n	80017bc <I2C_Read+0x10c>
    }

      /*!< Send STRAT condition a second time */  
  I2C_GenerateSTART(i2c, ENABLE);
 80017e2:	2101      	movs	r1, #1
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff f9b4 	bl	8000b52 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  Timeout = I2C_TIMEOUT;
 80017ea:	4b4c      	ldr	r3, [pc, #304]	@ (800191c <I2C_Read+0x26c>)
 80017ec:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 80017f0:	801a      	strh	r2, [r3, #0]
  while(!I2C_CheckEvent(i2c, I2C_EVENT_MASTER_MODE_SELECT))
 80017f2:	e00b      	b.n	800180c <I2C_Read+0x15c>
  {
    if((Timeout--) == 0) return TIMEOUT_UserCallback();
 80017f4:	4b49      	ldr	r3, [pc, #292]	@ (800191c <I2C_Read+0x26c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	b291      	uxth	r1, r2
 80017fe:	4a47      	ldr	r2, [pc, #284]	@ (800191c <I2C_Read+0x26c>)
 8001800:	8011      	strh	r1, [r2, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <I2C_Read+0x15c>
 8001806:	f000 f8b7 	bl	8001978 <TIMEOUT_UserCallback>
 800180a:	e0ad      	b.n	8001968 <I2C_Read+0x2b8>
  while(!I2C_CheckEvent(i2c, I2C_EVENT_MASTER_MODE_SELECT))
 800180c:	4944      	ldr	r1, [pc, #272]	@ (8001920 <I2C_Read+0x270>)
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f7ff fa35 	bl	8000c7e <I2C_CheckEvent>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0ec      	beq.n	80017f4 <I2C_Read+0x144>
  } 
  
  /*!< Send RTC address for read */
  I2C_Send7bitAddress(i2c, Device_Addr << 1, I2C_Direction_Receiver);  
 800181a:	7afb      	ldrb	r3, [r7, #11]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2201      	movs	r2, #1
 8001822:	4619      	mov	r1, r3
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff fa0d 	bl	8000c44 <I2C_Send7bitAddress>


  if (NumByteToRead < 2)
 800182a:	8c3b      	ldrh	r3, [r7, #32]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d864      	bhi.n	80018fa <I2C_Read+0x24a>
  {
    /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
    Timeout = I2C_TIMEOUT;
 8001830:	4b3a      	ldr	r3, [pc, #232]	@ (800191c <I2C_Read+0x26c>)
 8001832:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 8001836:	801a      	strh	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_ADDR) == RESET)
 8001838:	e00b      	b.n	8001852 <I2C_Read+0x1a2>
    {
      if((Timeout--) == 0) return TIMEOUT_UserCallback();
 800183a:	4b38      	ldr	r3, [pc, #224]	@ (800191c <I2C_Read+0x26c>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	b291      	uxth	r1, r2
 8001844:	4a35      	ldr	r2, [pc, #212]	@ (800191c <I2C_Read+0x26c>)
 8001846:	8011      	strh	r1, [r2, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <I2C_Read+0x1a2>
 800184c:	f000 f894 	bl	8001978 <TIMEOUT_UserCallback>
 8001850:	e08a      	b.n	8001968 <I2C_Read+0x2b8>
    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_ADDR) == RESET)
 8001852:	4935      	ldr	r1, [pc, #212]	@ (8001928 <I2C_Read+0x278>)
 8001854:	4836      	ldr	r0, [pc, #216]	@ (8001930 <I2C_Read+0x280>)
 8001856:	f7ff fa41 	bl	8000cdc <I2C_GetFlagStatus>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0ec      	beq.n	800183a <I2C_Read+0x18a>
    }     
    
    /*!< Disable Acknowledgement */
    I2C_AcknowledgeConfig(I2C1, DISABLE);   
 8001860:	2100      	movs	r1, #0
 8001862:	4833      	ldr	r0, [pc, #204]	@ (8001930 <I2C_Read+0x280>)
 8001864:	f7ff f9b3 	bl	8000bce <I2C_AcknowledgeConfig>

    /* Call User callback for critical section start (should typically disable interrupts) */
    __disable_irq();  
 8001868:	f7ff fe4d 	bl	8001506 <__disable_irq>
    
    /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
    (void)I2C1->SR2;
 800186c:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <I2C_Read+0x280>)
 800186e:	8b1b      	ldrh	r3, [r3, #24]
    
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(I2C1, ENABLE);
 8001870:	2101      	movs	r1, #1
 8001872:	482f      	ldr	r0, [pc, #188]	@ (8001930 <I2C_Read+0x280>)
 8001874:	f7ff f98c 	bl	8000b90 <I2C_GenerateSTOP>
   
    /* Call User callback for critical section end (should typically re-enable interrupts) */
    __enable_irq();
 8001878:	f7ff fe3e 	bl	80014f8 <__enable_irq>
    
    /* Wait for the byte to be received */
    Timeout = I2C_TIMEOUT;
 800187c:	4b27      	ldr	r3, [pc, #156]	@ (800191c <I2C_Read+0x26c>)
 800187e:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 8001882:	801a      	strh	r2, [r3, #0]
    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET)
 8001884:	e00b      	b.n	800189e <I2C_Read+0x1ee>
    {
      if((Timeout--) == 0) return TIMEOUT_UserCallback();
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <I2C_Read+0x26c>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	b291      	uxth	r1, r2
 8001890:	4a22      	ldr	r2, [pc, #136]	@ (800191c <I2C_Read+0x26c>)
 8001892:	8011      	strh	r1, [r2, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <I2C_Read+0x1ee>
 8001898:	f000 f86e 	bl	8001978 <TIMEOUT_UserCallback>
 800189c:	e064      	b.n	8001968 <I2C_Read+0x2b8>
    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_RXNE) == RESET)
 800189e:	4926      	ldr	r1, [pc, #152]	@ (8001938 <I2C_Read+0x288>)
 80018a0:	4823      	ldr	r0, [pc, #140]	@ (8001930 <I2C_Read+0x280>)
 80018a2:	f7ff fa1b 	bl	8000cdc <I2C_GetFlagStatus>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ec      	beq.n	8001886 <I2C_Read+0x1d6>
    }
    
    /*!< Read the byte received from the EEPROM */
    *pBuffer = I2C_ReceiveData(I2C1);
 80018ac:	4820      	ldr	r0, [pc, #128]	@ (8001930 <I2C_Read+0x280>)
 80018ae:	f7ff f9bc 	bl	8000c2a <I2C_ReceiveData>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	701a      	strb	r2, [r3, #0]
    
    /*!< Decrement the read bytes counter */
    (uint16_t)(NumByteToRead)--;        
 80018ba:	8c3b      	ldrh	r3, [r7, #32]
 80018bc:	3b01      	subs	r3, #1
 80018be:	843b      	strh	r3, [r7, #32]
    
    /* Wait to make sure that STOP control bit has been cleared */
    Timeout = I2C_TIMEOUT;
 80018c0:	4b16      	ldr	r3, [pc, #88]	@ (800191c <I2C_Read+0x26c>)
 80018c2:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 80018c6:	801a      	strh	r2, [r3, #0]
    while(I2C1->CR1 & I2C_CR1_STOP)
 80018c8:	e00b      	b.n	80018e2 <I2C_Read+0x232>
    {
      if((Timeout--) == 0) return TIMEOUT_UserCallback();
 80018ca:	4b14      	ldr	r3, [pc, #80]	@ (800191c <I2C_Read+0x26c>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	b291      	uxth	r1, r2
 80018d4:	4a11      	ldr	r2, [pc, #68]	@ (800191c <I2C_Read+0x26c>)
 80018d6:	8011      	strh	r1, [r2, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <I2C_Read+0x232>
 80018dc:	f000 f84c 	bl	8001978 <TIMEOUT_UserCallback>
 80018e0:	e042      	b.n	8001968 <I2C_Read+0x2b8>
    while(I2C1->CR1 & I2C_CR1_STOP)
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <I2C_Read+0x280>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ec      	bne.n	80018ca <I2C_Read+0x21a>
    }  
    
    /*!< Re-Enable Acknowledgement to be ready for another reception */
    I2C_AcknowledgeConfig(I2C1, ENABLE);    
 80018f0:	2101      	movs	r1, #1
 80018f2:	480f      	ldr	r0, [pc, #60]	@ (8001930 <I2C_Read+0x280>)
 80018f4:	f7ff f96b 	bl	8000bce <I2C_AcknowledgeConfig>
    /* Enable the DMA Rx Channel */
    DMA_Cmd(I2C_DMA_CHANNEL_RX, ENABLE);   

  }

    return STATUS_OK;
 80018f8:	e035      	b.n	8001966 <I2C_Read+0x2b6>
    Timeout = I2C_TIMEOUT;
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <I2C_Read+0x26c>)
 80018fc:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 8001900:	801a      	strh	r2, [r3, #0]
    while(!I2C_CheckEvent(i2c, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 8001902:	e01b      	b.n	800193c <I2C_Read+0x28c>
      if((Timeout--) == 0) return TIMEOUT_UserCallback();
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <I2C_Read+0x26c>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	1e5a      	subs	r2, r3, #1
 800190c:	b291      	uxth	r1, r2
 800190e:	4a03      	ldr	r2, [pc, #12]	@ (800191c <I2C_Read+0x26c>)
 8001910:	8011      	strh	r1, [r2, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d112      	bne.n	800193c <I2C_Read+0x28c>
 8001916:	f000 f82f 	bl	8001978 <TIMEOUT_UserCallback>
 800191a:	e025      	b.n	8001968 <I2C_Read+0x2b8>
 800191c:	20000030 	.word	0x20000030
 8001920:	00030001 	.word	0x00030001
 8001924:	00070082 	.word	0x00070082
 8001928:	10000002 	.word	0x10000002
 800192c:	10000080 	.word	0x10000080
 8001930:	40005400 	.word	0x40005400
 8001934:	10000004 	.word	0x10000004
 8001938:	10000040 	.word	0x10000040
    while(!I2C_CheckEvent(i2c, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
 800193c:	490c      	ldr	r1, [pc, #48]	@ (8001970 <I2C_Read+0x2c0>)
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff f99d 	bl	8000c7e <I2C_CheckEvent>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0dc      	beq.n	8001904 <I2C_Read+0x254>
    LowLevel_DMAConfig((uint32_t)pBuffer, (NumByteToRead), DIRECTION_RX);
 800194a:	8c3b      	ldrh	r3, [r7, #32]
 800194c:	2201      	movs	r2, #1
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff fbef 	bl	8001134 <LowLevel_DMAConfig>
    I2C_DMALastTransferCmd(i2c, ENABLE); 
 8001956:	2101      	movs	r1, #1
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff f8db 	bl	8000b14 <I2C_DMALastTransferCmd>
    DMA_Cmd(I2C_DMA_CHANNEL_RX, ENABLE);   
 800195e:	2101      	movs	r1, #1
 8001960:	4804      	ldr	r0, [pc, #16]	@ (8001974 <I2C_Read+0x2c4>)
 8001962:	f7fe fe83 	bl	800066c <DMA_Cmd>
    return STATUS_OK;
 8001966:	bf00      	nop
}
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	00030002 	.word	0x00030002
 8001974:	40020080 	.word	0x40020080

08001978 <TIMEOUT_UserCallback>:


void TIMEOUT_UserCallback(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
    while(1);
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <TIMEOUT_UserCallback+0x4>

08001980 <Nvic_I2C_DMA>:
#include "Nvic_midderware.h"


void Nvic_I2C_DMA(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

    NVIC_InitTypeDef NVIC_InitStructure;  
    /* Configure and enable I2C DMA TX Channel interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = I2C_DMA_TX_IRQn;
 8001986:	2310      	movs	r3, #16
 8001988:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = I2C_DMA_PREPRIO;
 800198a:	2300      	movs	r3, #0
 800198c:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = I2C_DMA_SUBPRIO;
 800198e:	2300      	movs	r3, #0
 8001990:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001992:	2301      	movs	r3, #1
 8001994:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fd0b 	bl	80003b4 <NVIC_Init>

    /* Configure and enable I2C DMA RX Channel interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = I2C_DMA_RX_IRQn;
 800199e:	2311      	movs	r3, #17
 80019a0:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = I2C_DMA_PREPRIO;
 80019a2:	2300      	movs	r3, #0
 80019a4:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = I2C_DMA_SUBPRIO;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);  
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fd01 	bl	80003b4 <NVIC_Init>
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_TypeDef *hi2c) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <DS1307_Init+0x1c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 f806 	bl	80019dc <DS1307_SetClockHalt>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200001b8 	.word	0x200001b8

080019dc <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <DS1307_SetClockHalt+0x14>
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	e000      	b.n	80019f2 <DS1307_SetClockHalt+0x16>
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 80019f4:	2000      	movs	r0, #0
 80019f6:	f000 f83d 	bl	8001a74 <DS1307_GetRegByte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a02:	b25a      	sxtb	r2, r3
 8001a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	2000      	movs	r0, #0
 8001a12:	f000 f811 	bl	8001a38 <DS1307_SetRegByte>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 f826 	bl	8001a74 <DS1307_GetRegByte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	11db      	asrs	r3, r3, #7
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	4603      	mov	r3, r0
 8001a40:	460a      	mov	r2, r1
 8001a42:	71fb      	strb	r3, [r7, #7]
 8001a44:	4613      	mov	r3, r2
 8001a46:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	733b      	strb	r3, [r7, #12]
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	737b      	strb	r3, [r7, #13]
	I2C_write(_ds1307_ui2c, DS1307_I2C_ADDR, bytes, 2, DS1307_TIMEOUT);
 8001a50:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <DS1307_SetRegByte+0x38>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	f107 020c 	add.w	r2, r7, #12
 8001a58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2302      	movs	r3, #2
 8001a60:	2168      	movs	r1, #104	@ 0x68
 8001a62:	f7ff fda5 	bl	80015b0 <I2C_write>
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200001b8 	.word	0x200001b8

08001a74 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	I2C_Read(_ds1307_ui2c, DS1307_I2C_ADDR, &val, regAddr, 1);
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <DS1307_GetRegByte+0x28>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f107 020f 	add.w	r2, r7, #15
 8001a88:	2101      	movs	r1, #1
 8001a8a:	9100      	str	r1, [sp, #0]
 8001a8c:	2168      	movs	r1, #104	@ 0x68
 8001a8e:	f7ff fe0f 	bl	80016b0 <I2C_Read>
	return val;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200001b8 	.word	0x200001b8

08001aa0 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f7ff ffe5 	bl	8001a74 <DS1307_GetRegByte>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f92d 	bl	8001d0c <DS1307_DecodeBCD>
 8001ab2:	4603      	mov	r3, r0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8001abc:	2004      	movs	r0, #4
 8001abe:	f7ff ffd9 	bl	8001a74 <DS1307_GetRegByte>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 f921 	bl	8001d0c <DS1307_DecodeBCD>
 8001aca:	4603      	mov	r3, r0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 8001ad4:	2005      	movs	r0, #5
 8001ad6:	f7ff ffcd 	bl	8001a74 <DS1307_GetRegByte>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f915 	bl	8001d0c <DS1307_DecodeBCD>
 8001ae2:	4603      	mov	r3, r0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8001aee:	2010      	movs	r0, #16
 8001af0:	f7ff ffc0 	bl	8001a74 <DS1307_GetRegByte>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	461a      	mov	r2, r3
 8001afe:	0091      	lsls	r1, r2, #2
 8001b00:	461a      	mov	r2, r3
 8001b02:	460b      	mov	r3, r1
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8001b0a:	2006      	movs	r0, #6
 8001b0c:	f7ff ffb2 	bl	8001a74 <DS1307_GetRegByte>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f8fa 	bl	8001d0c <DS1307_DecodeBCD>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29b      	uxth	r3, r3
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001b2e:	2002      	movs	r0, #2
 8001b30:	f7ff ffa0 	bl	8001a74 <DS1307_GetRegByte>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f8e5 	bl	8001d0c <DS1307_DecodeBCD>
 8001b42:	4603      	mov	r3, r0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff ff91 	bl	8001a74 <DS1307_GetRegByte>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f8d9 	bl	8001d0c <DS1307_DecodeBCD>
 8001b5a:	4603      	mov	r3, r0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff ff85 	bl	8001a74 <DS1307_GetRegByte>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f8ca 	bl	8001d0c <DS1307_DecodeBCD>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 8001b82:	2008      	movs	r0, #8
 8001b84:	f7ff ff76 	bl	8001a74 <DS1307_GetRegByte>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b25b      	sxtb	r3, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 8001b94:	2009      	movs	r0, #9
 8001b96:	f7ff ff6d 	bl	8001a74 <DS1307_GetRegByte>
 8001b9a:	4603      	mov	r3, r0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f8c5 	bl	8001d3c <DS1307_EncodeBCD>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	f7ff ff3e 	bl	8001a38 <DS1307_SetRegByte>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f8b3 	bl	8001d3c <DS1307_EncodeBCD>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	2004      	movs	r0, #4
 8001bdc:	f7ff ff2c 	bl	8001a38 <DS1307_SetRegByte>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f8a1 	bl	8001d3c <DS1307_EncodeBCD>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	2005      	movs	r0, #5
 8001c00:	f7ff ff1a 	bl	8001a38 <DS1307_SetRegByte>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	4a10      	ldr	r2, [pc, #64]	@ (8001c5c <DS1307_SetYear+0x50>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4619      	mov	r1, r3
 8001c26:	2010      	movs	r0, #16
 8001c28:	f7ff ff06 	bl	8001a38 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <DS1307_SetYear+0x50>)
 8001c30:	fba2 1203 	umull	r1, r2, r2, r3
 8001c34:	0952      	lsrs	r2, r2, #5
 8001c36:	2164      	movs	r1, #100	@ 0x64
 8001c38:	fb01 f202 	mul.w	r2, r1, r2
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f87a 	bl	8001d3c <DS1307_EncodeBCD>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	2006      	movs	r0, #6
 8001c4e:	f7ff fef3 	bl	8001a38 <DS1307_SetRegByte>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	51eb851f 	.word	0x51eb851f

08001c60 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f862 	bl	8001d3c <DS1307_EncodeBCD>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f7ff fedb 	bl	8001a38 <DS1307_SetRegByte>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f850 	bl	8001d3c <DS1307_EncodeBCD>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff fec9 	bl	8001a38 <DS1307_SetRegByte>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 8001cb8:	f7ff feb1 	bl	8001a1e <DS1307_GetClockHalt>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8001cc0:	79fa      	ldrb	r2, [r7, #7]
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f837 	bl	8001d3c <DS1307_EncodeBCD>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff feb0 	bl	8001a38 <DS1307_SetRegByte>
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <DS1307_SetTimeZone>:
 * @brief Sets UTC offset.
 * @note  UTC offset is not updated automatically.
 * @param hr UTC hour offset, -12 to 12.
 * @param min UTC minute offset, 0 to 59.
 */
void DS1307_SetTimeZone(int8_t hr, uint8_t min) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460a      	mov	r2, r1
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	71bb      	strb	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_UTC_HR, hr);
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	2008      	movs	r0, #8
 8001cf6:	f7ff fe9f 	bl	8001a38 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_UTC_MIN, min);
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2009      	movs	r0, #9
 8001d00:	f7ff fe9a 	bl	8001a38 <DS1307_SetRegByte>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	b2db      	uxtb	r3, r3
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8001d46:	79fa      	ldrb	r2, [r7, #7]
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <DS1307_EncodeBCD+0x40>)
 8001d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d4e:	08d9      	lsrs	r1, r3, #3
 8001d50:	460b      	mov	r3, r1
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	4907      	ldr	r1, [pc, #28]	@ (8001d7c <DS1307_EncodeBCD+0x40>)
 8001d60:	fba1 1303 	umull	r1, r3, r1, r3
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b2db      	uxtb	r3, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	cccccccd 	.word	0xcccccccd

08001d80 <main>:

RTC_InitDefaultTypeDef DefaultValue = {27, 4, 2025, 0, 23, 57, 59};


int main(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
    Init_LCD();
 8001d84:	f7fe fa40 	bl	8000208 <Init_LCD>
    RTC_Init(&DefaultValue);
 8001d88:	480b      	ldr	r0, [pc, #44]	@ (8001db8 <main+0x38>)
 8001d8a:	f7fe fa57 	bl	800023c <RTC_Init>
    while(1)
    {
        GetValueDisplay_RTC();
 8001d8e:	f7fe fa89 	bl	80002a4 <GetValueDisplay_RTC>
        Delay(3);
 8001d92:	2003      	movs	r0, #3
 8001d94:	f7ff fb8a 	bl	80014ac <Delay>
        lcd_gotoxy(0, 0);
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff fb02 	bl	80013a4 <lcd_gotoxy>
        lcd_puts(buffer);
 8001da0:	4806      	ldr	r0, [pc, #24]	@ (8001dbc <main+0x3c>)
 8001da2:	f7ff fb6e 	bl	8001482 <lcd_puts>
        lcd_gotoxy(0, 1);
 8001da6:	2101      	movs	r1, #1
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff fafb 	bl	80013a4 <lcd_gotoxy>
        lcd_puts(buffer1);
 8001dae:	4804      	ldr	r0, [pc, #16]	@ (8001dc0 <main+0x40>)
 8001db0:	f7ff fb67 	bl	8001482 <lcd_puts>
    {
 8001db4:	bf00      	nop
 8001db6:	e7ea      	b.n	8001d8e <main+0xe>
 8001db8:	20000034 	.word	0x20000034
 8001dbc:	200000b8 	.word	0x200000b8
 8001dc0:	2000011c 	.word	0x2000011c

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	@ (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	@ (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f000 f920 	bl	8002038 <__errno>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	@ (8001e28 <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20002800 	.word	0x20002800
 8001e24:	00000400 	.word	0x00000400
 8001e28:	200001bc 	.word	0x200001bc
 8001e2c:	20000308 	.word	0x20000308

08001e30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e34:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <SystemInit+0x5c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <SystemInit+0x5c>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <SystemInit+0x5c>)
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4911      	ldr	r1, [pc, #68]	@ (8001e8c <SystemInit+0x5c>)
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <SystemInit+0x60>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <SystemInit+0x5c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0e      	ldr	r2, [pc, #56]	@ (8001e8c <SystemInit+0x5c>)
 8001e52:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <SystemInit+0x5c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <SystemInit+0x5c>)
 8001e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e66:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <SystemInit+0x5c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	@ (8001e8c <SystemInit+0x5c>)
 8001e6e:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8001e72:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001e74:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <SystemInit+0x5c>)
 8001e76:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8001e7a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001e7c:	f000 f80c 	bl	8001e98 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e80:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <SystemInit+0x64>)
 8001e82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e86:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	f8ff0000 	.word	0xf8ff0000
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001e9c:	f000 f802 	bl	8001ea4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a39      	ldr	r2, [pc, #228]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001ebe:	4b37      	ldr	r3, [pc, #220]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <SetSysClockTo72+0x38>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001eda:	d1f0      	bne.n	8001ebe <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001edc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	e001      	b.n	8001ef2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d14b      	bne.n	8001f90 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001ef8:	4b29      	ldr	r3, [pc, #164]	@ (8001fa0 <SetSysClockTo72+0xfc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a28      	ldr	r2, [pc, #160]	@ (8001fa0 <SetSysClockTo72+0xfc>)
 8001efe:	f043 0310 	orr.w	r3, r3, #16
 8001f02:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001f04:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <SetSysClockTo72+0xfc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a25      	ldr	r2, [pc, #148]	@ (8001fa0 <SetSysClockTo72+0xfc>)
 8001f0a:	f023 0303 	bic.w	r3, r3, #3
 8001f0e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001f10:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <SetSysClockTo72+0xfc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a22      	ldr	r2, [pc, #136]	@ (8001fa0 <SetSysClockTo72+0xfc>)
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f26:	4a1d      	ldr	r2, [pc, #116]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a1a      	ldr	r2, [pc, #104]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f36:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001f38:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f3e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001f42:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001f44:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a14      	ldr	r2, [pc, #80]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f4a:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8001f4e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a11      	ldr	r2, [pc, #68]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f5a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001f5c:	bf00      	nop
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f9      	beq.n	8001f5e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f70:	f023 0303 	bic.w	r3, r3, #3
 8001f74:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a08      	ldr	r2, [pc, #32]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001f82:	bf00      	nop
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <SetSysClockTo72+0xf8>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d1f9      	bne.n	8001f84 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40022000 	.word	0x40022000

08001fa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fa4:	480d      	ldr	r0, [pc, #52]	@ (8001fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fa6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa8:	f7ff ff42 	bl	8001e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fac:	480c      	ldr	r0, [pc, #48]	@ (8001fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fae:	490d      	ldr	r1, [pc, #52]	@ (8001fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <LoopForever+0xe>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff0 <LoopForever+0x16>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fd2:	f000 f837 	bl	8002044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fd6:	f7ff fed3 	bl	8001d80 <main>

08001fda <LoopForever>:

LoopForever:
  b LoopForever
 8001fda:	e7fe      	b.n	8001fda <LoopForever>
  ldr   r0, =_estack
 8001fdc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001fe8:	08002a14 	.word	0x08002a14
  ldr r2, =_sbss
 8001fec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001ff0:	20000308 	.word	0x20000308

08001ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC1_2_IRQHandler>
	...

08001ff8 <siprintf>:
 8001ff8:	b40e      	push	{r1, r2, r3}
 8001ffa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001ffe:	b500      	push	{lr}
 8002000:	b09c      	sub	sp, #112	@ 0x70
 8002002:	ab1d      	add	r3, sp, #116	@ 0x74
 8002004:	9002      	str	r0, [sp, #8]
 8002006:	9006      	str	r0, [sp, #24]
 8002008:	9107      	str	r1, [sp, #28]
 800200a:	9104      	str	r1, [sp, #16]
 800200c:	4808      	ldr	r0, [pc, #32]	@ (8002030 <siprintf+0x38>)
 800200e:	4909      	ldr	r1, [pc, #36]	@ (8002034 <siprintf+0x3c>)
 8002010:	f853 2b04 	ldr.w	r2, [r3], #4
 8002014:	9105      	str	r1, [sp, #20]
 8002016:	6800      	ldr	r0, [r0, #0]
 8002018:	a902      	add	r1, sp, #8
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	f000 f98a 	bl	8002334 <_svfiprintf_r>
 8002020:	2200      	movs	r2, #0
 8002022:	9b02      	ldr	r3, [sp, #8]
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	b01c      	add	sp, #112	@ 0x70
 8002028:	f85d eb04 	ldr.w	lr, [sp], #4
 800202c:	b003      	add	sp, #12
 800202e:	4770      	bx	lr
 8002030:	20000040 	.word	0x20000040
 8002034:	ffff0208 	.word	0xffff0208

08002038 <__errno>:
 8002038:	4b01      	ldr	r3, [pc, #4]	@ (8002040 <__errno+0x8>)
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000040 	.word	0x20000040

08002044 <__libc_init_array>:
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	2600      	movs	r6, #0
 8002048:	4d0c      	ldr	r5, [pc, #48]	@ (800207c <__libc_init_array+0x38>)
 800204a:	4c0d      	ldr	r4, [pc, #52]	@ (8002080 <__libc_init_array+0x3c>)
 800204c:	1b64      	subs	r4, r4, r5
 800204e:	10a4      	asrs	r4, r4, #2
 8002050:	42a6      	cmp	r6, r4
 8002052:	d109      	bne.n	8002068 <__libc_init_array+0x24>
 8002054:	f000 fc78 	bl	8002948 <_init>
 8002058:	2600      	movs	r6, #0
 800205a:	4d0a      	ldr	r5, [pc, #40]	@ (8002084 <__libc_init_array+0x40>)
 800205c:	4c0a      	ldr	r4, [pc, #40]	@ (8002088 <__libc_init_array+0x44>)
 800205e:	1b64      	subs	r4, r4, r5
 8002060:	10a4      	asrs	r4, r4, #2
 8002062:	42a6      	cmp	r6, r4
 8002064:	d105      	bne.n	8002072 <__libc_init_array+0x2e>
 8002066:	bd70      	pop	{r4, r5, r6, pc}
 8002068:	f855 3b04 	ldr.w	r3, [r5], #4
 800206c:	4798      	blx	r3
 800206e:	3601      	adds	r6, #1
 8002070:	e7ee      	b.n	8002050 <__libc_init_array+0xc>
 8002072:	f855 3b04 	ldr.w	r3, [r5], #4
 8002076:	4798      	blx	r3
 8002078:	3601      	adds	r6, #1
 800207a:	e7f2      	b.n	8002062 <__libc_init_array+0x1e>
 800207c:	08002a0c 	.word	0x08002a0c
 8002080:	08002a0c 	.word	0x08002a0c
 8002084:	08002a0c 	.word	0x08002a0c
 8002088:	08002a10 	.word	0x08002a10

0800208c <__retarget_lock_acquire_recursive>:
 800208c:	4770      	bx	lr

0800208e <__retarget_lock_release_recursive>:
 800208e:	4770      	bx	lr

08002090 <_free_r>:
 8002090:	b538      	push	{r3, r4, r5, lr}
 8002092:	4605      	mov	r5, r0
 8002094:	2900      	cmp	r1, #0
 8002096:	d040      	beq.n	800211a <_free_r+0x8a>
 8002098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800209c:	1f0c      	subs	r4, r1, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bfb8      	it	lt
 80020a2:	18e4      	addlt	r4, r4, r3
 80020a4:	f000 f8de 	bl	8002264 <__malloc_lock>
 80020a8:	4a1c      	ldr	r2, [pc, #112]	@ (800211c <_free_r+0x8c>)
 80020aa:	6813      	ldr	r3, [r2, #0]
 80020ac:	b933      	cbnz	r3, 80020bc <_free_r+0x2c>
 80020ae:	6063      	str	r3, [r4, #4]
 80020b0:	6014      	str	r4, [r2, #0]
 80020b2:	4628      	mov	r0, r5
 80020b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020b8:	f000 b8da 	b.w	8002270 <__malloc_unlock>
 80020bc:	42a3      	cmp	r3, r4
 80020be:	d908      	bls.n	80020d2 <_free_r+0x42>
 80020c0:	6820      	ldr	r0, [r4, #0]
 80020c2:	1821      	adds	r1, r4, r0
 80020c4:	428b      	cmp	r3, r1
 80020c6:	bf01      	itttt	eq
 80020c8:	6819      	ldreq	r1, [r3, #0]
 80020ca:	685b      	ldreq	r3, [r3, #4]
 80020cc:	1809      	addeq	r1, r1, r0
 80020ce:	6021      	streq	r1, [r4, #0]
 80020d0:	e7ed      	b.n	80020ae <_free_r+0x1e>
 80020d2:	461a      	mov	r2, r3
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	b10b      	cbz	r3, 80020dc <_free_r+0x4c>
 80020d8:	42a3      	cmp	r3, r4
 80020da:	d9fa      	bls.n	80020d2 <_free_r+0x42>
 80020dc:	6811      	ldr	r1, [r2, #0]
 80020de:	1850      	adds	r0, r2, r1
 80020e0:	42a0      	cmp	r0, r4
 80020e2:	d10b      	bne.n	80020fc <_free_r+0x6c>
 80020e4:	6820      	ldr	r0, [r4, #0]
 80020e6:	4401      	add	r1, r0
 80020e8:	1850      	adds	r0, r2, r1
 80020ea:	4283      	cmp	r3, r0
 80020ec:	6011      	str	r1, [r2, #0]
 80020ee:	d1e0      	bne.n	80020b2 <_free_r+0x22>
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4408      	add	r0, r1
 80020f6:	6010      	str	r0, [r2, #0]
 80020f8:	6053      	str	r3, [r2, #4]
 80020fa:	e7da      	b.n	80020b2 <_free_r+0x22>
 80020fc:	d902      	bls.n	8002104 <_free_r+0x74>
 80020fe:	230c      	movs	r3, #12
 8002100:	602b      	str	r3, [r5, #0]
 8002102:	e7d6      	b.n	80020b2 <_free_r+0x22>
 8002104:	6820      	ldr	r0, [r4, #0]
 8002106:	1821      	adds	r1, r4, r0
 8002108:	428b      	cmp	r3, r1
 800210a:	bf01      	itttt	eq
 800210c:	6819      	ldreq	r1, [r3, #0]
 800210e:	685b      	ldreq	r3, [r3, #4]
 8002110:	1809      	addeq	r1, r1, r0
 8002112:	6021      	streq	r1, [r4, #0]
 8002114:	6063      	str	r3, [r4, #4]
 8002116:	6054      	str	r4, [r2, #4]
 8002118:	e7cb      	b.n	80020b2 <_free_r+0x22>
 800211a:	bd38      	pop	{r3, r4, r5, pc}
 800211c:	20000304 	.word	0x20000304

08002120 <sbrk_aligned>:
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	4e0f      	ldr	r6, [pc, #60]	@ (8002160 <sbrk_aligned+0x40>)
 8002124:	460c      	mov	r4, r1
 8002126:	6831      	ldr	r1, [r6, #0]
 8002128:	4605      	mov	r5, r0
 800212a:	b911      	cbnz	r1, 8002132 <sbrk_aligned+0x12>
 800212c:	f000 fbaa 	bl	8002884 <_sbrk_r>
 8002130:	6030      	str	r0, [r6, #0]
 8002132:	4621      	mov	r1, r4
 8002134:	4628      	mov	r0, r5
 8002136:	f000 fba5 	bl	8002884 <_sbrk_r>
 800213a:	1c43      	adds	r3, r0, #1
 800213c:	d103      	bne.n	8002146 <sbrk_aligned+0x26>
 800213e:	f04f 34ff 	mov.w	r4, #4294967295
 8002142:	4620      	mov	r0, r4
 8002144:	bd70      	pop	{r4, r5, r6, pc}
 8002146:	1cc4      	adds	r4, r0, #3
 8002148:	f024 0403 	bic.w	r4, r4, #3
 800214c:	42a0      	cmp	r0, r4
 800214e:	d0f8      	beq.n	8002142 <sbrk_aligned+0x22>
 8002150:	1a21      	subs	r1, r4, r0
 8002152:	4628      	mov	r0, r5
 8002154:	f000 fb96 	bl	8002884 <_sbrk_r>
 8002158:	3001      	adds	r0, #1
 800215a:	d1f2      	bne.n	8002142 <sbrk_aligned+0x22>
 800215c:	e7ef      	b.n	800213e <sbrk_aligned+0x1e>
 800215e:	bf00      	nop
 8002160:	20000300 	.word	0x20000300

08002164 <_malloc_r>:
 8002164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002168:	1ccd      	adds	r5, r1, #3
 800216a:	f025 0503 	bic.w	r5, r5, #3
 800216e:	3508      	adds	r5, #8
 8002170:	2d0c      	cmp	r5, #12
 8002172:	bf38      	it	cc
 8002174:	250c      	movcc	r5, #12
 8002176:	2d00      	cmp	r5, #0
 8002178:	4606      	mov	r6, r0
 800217a:	db01      	blt.n	8002180 <_malloc_r+0x1c>
 800217c:	42a9      	cmp	r1, r5
 800217e:	d904      	bls.n	800218a <_malloc_r+0x26>
 8002180:	230c      	movs	r3, #12
 8002182:	6033      	str	r3, [r6, #0]
 8002184:	2000      	movs	r0, #0
 8002186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800218a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002260 <_malloc_r+0xfc>
 800218e:	f000 f869 	bl	8002264 <__malloc_lock>
 8002192:	f8d8 3000 	ldr.w	r3, [r8]
 8002196:	461c      	mov	r4, r3
 8002198:	bb44      	cbnz	r4, 80021ec <_malloc_r+0x88>
 800219a:	4629      	mov	r1, r5
 800219c:	4630      	mov	r0, r6
 800219e:	f7ff ffbf 	bl	8002120 <sbrk_aligned>
 80021a2:	1c43      	adds	r3, r0, #1
 80021a4:	4604      	mov	r4, r0
 80021a6:	d158      	bne.n	800225a <_malloc_r+0xf6>
 80021a8:	f8d8 4000 	ldr.w	r4, [r8]
 80021ac:	4627      	mov	r7, r4
 80021ae:	2f00      	cmp	r7, #0
 80021b0:	d143      	bne.n	800223a <_malloc_r+0xd6>
 80021b2:	2c00      	cmp	r4, #0
 80021b4:	d04b      	beq.n	800224e <_malloc_r+0xea>
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	4639      	mov	r1, r7
 80021ba:	4630      	mov	r0, r6
 80021bc:	eb04 0903 	add.w	r9, r4, r3
 80021c0:	f000 fb60 	bl	8002884 <_sbrk_r>
 80021c4:	4581      	cmp	r9, r0
 80021c6:	d142      	bne.n	800224e <_malloc_r+0xea>
 80021c8:	6821      	ldr	r1, [r4, #0]
 80021ca:	4630      	mov	r0, r6
 80021cc:	1a6d      	subs	r5, r5, r1
 80021ce:	4629      	mov	r1, r5
 80021d0:	f7ff ffa6 	bl	8002120 <sbrk_aligned>
 80021d4:	3001      	adds	r0, #1
 80021d6:	d03a      	beq.n	800224e <_malloc_r+0xea>
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	442b      	add	r3, r5
 80021dc:	6023      	str	r3, [r4, #0]
 80021de:	f8d8 3000 	ldr.w	r3, [r8]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	bb62      	cbnz	r2, 8002240 <_malloc_r+0xdc>
 80021e6:	f8c8 7000 	str.w	r7, [r8]
 80021ea:	e00f      	b.n	800220c <_malloc_r+0xa8>
 80021ec:	6822      	ldr	r2, [r4, #0]
 80021ee:	1b52      	subs	r2, r2, r5
 80021f0:	d420      	bmi.n	8002234 <_malloc_r+0xd0>
 80021f2:	2a0b      	cmp	r2, #11
 80021f4:	d917      	bls.n	8002226 <_malloc_r+0xc2>
 80021f6:	1961      	adds	r1, r4, r5
 80021f8:	42a3      	cmp	r3, r4
 80021fa:	6025      	str	r5, [r4, #0]
 80021fc:	bf18      	it	ne
 80021fe:	6059      	strne	r1, [r3, #4]
 8002200:	6863      	ldr	r3, [r4, #4]
 8002202:	bf08      	it	eq
 8002204:	f8c8 1000 	streq.w	r1, [r8]
 8002208:	5162      	str	r2, [r4, r5]
 800220a:	604b      	str	r3, [r1, #4]
 800220c:	4630      	mov	r0, r6
 800220e:	f000 f82f 	bl	8002270 <__malloc_unlock>
 8002212:	f104 000b 	add.w	r0, r4, #11
 8002216:	1d23      	adds	r3, r4, #4
 8002218:	f020 0007 	bic.w	r0, r0, #7
 800221c:	1ac2      	subs	r2, r0, r3
 800221e:	bf1c      	itt	ne
 8002220:	1a1b      	subne	r3, r3, r0
 8002222:	50a3      	strne	r3, [r4, r2]
 8002224:	e7af      	b.n	8002186 <_malloc_r+0x22>
 8002226:	6862      	ldr	r2, [r4, #4]
 8002228:	42a3      	cmp	r3, r4
 800222a:	bf0c      	ite	eq
 800222c:	f8c8 2000 	streq.w	r2, [r8]
 8002230:	605a      	strne	r2, [r3, #4]
 8002232:	e7eb      	b.n	800220c <_malloc_r+0xa8>
 8002234:	4623      	mov	r3, r4
 8002236:	6864      	ldr	r4, [r4, #4]
 8002238:	e7ae      	b.n	8002198 <_malloc_r+0x34>
 800223a:	463c      	mov	r4, r7
 800223c:	687f      	ldr	r7, [r7, #4]
 800223e:	e7b6      	b.n	80021ae <_malloc_r+0x4a>
 8002240:	461a      	mov	r2, r3
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	42a3      	cmp	r3, r4
 8002246:	d1fb      	bne.n	8002240 <_malloc_r+0xdc>
 8002248:	2300      	movs	r3, #0
 800224a:	6053      	str	r3, [r2, #4]
 800224c:	e7de      	b.n	800220c <_malloc_r+0xa8>
 800224e:	230c      	movs	r3, #12
 8002250:	4630      	mov	r0, r6
 8002252:	6033      	str	r3, [r6, #0]
 8002254:	f000 f80c 	bl	8002270 <__malloc_unlock>
 8002258:	e794      	b.n	8002184 <_malloc_r+0x20>
 800225a:	6005      	str	r5, [r0, #0]
 800225c:	e7d6      	b.n	800220c <_malloc_r+0xa8>
 800225e:	bf00      	nop
 8002260:	20000304 	.word	0x20000304

08002264 <__malloc_lock>:
 8002264:	4801      	ldr	r0, [pc, #4]	@ (800226c <__malloc_lock+0x8>)
 8002266:	f7ff bf11 	b.w	800208c <__retarget_lock_acquire_recursive>
 800226a:	bf00      	nop
 800226c:	200002fc 	.word	0x200002fc

08002270 <__malloc_unlock>:
 8002270:	4801      	ldr	r0, [pc, #4]	@ (8002278 <__malloc_unlock+0x8>)
 8002272:	f7ff bf0c 	b.w	800208e <__retarget_lock_release_recursive>
 8002276:	bf00      	nop
 8002278:	200002fc 	.word	0x200002fc

0800227c <__ssputs_r>:
 800227c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002280:	461f      	mov	r7, r3
 8002282:	688e      	ldr	r6, [r1, #8]
 8002284:	4682      	mov	sl, r0
 8002286:	42be      	cmp	r6, r7
 8002288:	460c      	mov	r4, r1
 800228a:	4690      	mov	r8, r2
 800228c:	680b      	ldr	r3, [r1, #0]
 800228e:	d82d      	bhi.n	80022ec <__ssputs_r+0x70>
 8002290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002294:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002298:	d026      	beq.n	80022e8 <__ssputs_r+0x6c>
 800229a:	6965      	ldr	r5, [r4, #20]
 800229c:	6909      	ldr	r1, [r1, #16]
 800229e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022a2:	eba3 0901 	sub.w	r9, r3, r1
 80022a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80022aa:	1c7b      	adds	r3, r7, #1
 80022ac:	444b      	add	r3, r9
 80022ae:	106d      	asrs	r5, r5, #1
 80022b0:	429d      	cmp	r5, r3
 80022b2:	bf38      	it	cc
 80022b4:	461d      	movcc	r5, r3
 80022b6:	0553      	lsls	r3, r2, #21
 80022b8:	d527      	bpl.n	800230a <__ssputs_r+0x8e>
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7ff ff52 	bl	8002164 <_malloc_r>
 80022c0:	4606      	mov	r6, r0
 80022c2:	b360      	cbz	r0, 800231e <__ssputs_r+0xa2>
 80022c4:	464a      	mov	r2, r9
 80022c6:	6921      	ldr	r1, [r4, #16]
 80022c8:	f000 fafa 	bl	80028c0 <memcpy>
 80022cc:	89a3      	ldrh	r3, [r4, #12]
 80022ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80022d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022d6:	81a3      	strh	r3, [r4, #12]
 80022d8:	6126      	str	r6, [r4, #16]
 80022da:	444e      	add	r6, r9
 80022dc:	6026      	str	r6, [r4, #0]
 80022de:	463e      	mov	r6, r7
 80022e0:	6165      	str	r5, [r4, #20]
 80022e2:	eba5 0509 	sub.w	r5, r5, r9
 80022e6:	60a5      	str	r5, [r4, #8]
 80022e8:	42be      	cmp	r6, r7
 80022ea:	d900      	bls.n	80022ee <__ssputs_r+0x72>
 80022ec:	463e      	mov	r6, r7
 80022ee:	4632      	mov	r2, r6
 80022f0:	4641      	mov	r1, r8
 80022f2:	6820      	ldr	r0, [r4, #0]
 80022f4:	f000 faac 	bl	8002850 <memmove>
 80022f8:	2000      	movs	r0, #0
 80022fa:	68a3      	ldr	r3, [r4, #8]
 80022fc:	1b9b      	subs	r3, r3, r6
 80022fe:	60a3      	str	r3, [r4, #8]
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	4433      	add	r3, r6
 8002304:	6023      	str	r3, [r4, #0]
 8002306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800230a:	462a      	mov	r2, r5
 800230c:	f000 fae6 	bl	80028dc <_realloc_r>
 8002310:	4606      	mov	r6, r0
 8002312:	2800      	cmp	r0, #0
 8002314:	d1e0      	bne.n	80022d8 <__ssputs_r+0x5c>
 8002316:	4650      	mov	r0, sl
 8002318:	6921      	ldr	r1, [r4, #16]
 800231a:	f7ff feb9 	bl	8002090 <_free_r>
 800231e:	230c      	movs	r3, #12
 8002320:	f8ca 3000 	str.w	r3, [sl]
 8002324:	89a3      	ldrh	r3, [r4, #12]
 8002326:	f04f 30ff 	mov.w	r0, #4294967295
 800232a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800232e:	81a3      	strh	r3, [r4, #12]
 8002330:	e7e9      	b.n	8002306 <__ssputs_r+0x8a>
	...

08002334 <_svfiprintf_r>:
 8002334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002338:	4698      	mov	r8, r3
 800233a:	898b      	ldrh	r3, [r1, #12]
 800233c:	4607      	mov	r7, r0
 800233e:	061b      	lsls	r3, r3, #24
 8002340:	460d      	mov	r5, r1
 8002342:	4614      	mov	r4, r2
 8002344:	b09d      	sub	sp, #116	@ 0x74
 8002346:	d510      	bpl.n	800236a <_svfiprintf_r+0x36>
 8002348:	690b      	ldr	r3, [r1, #16]
 800234a:	b973      	cbnz	r3, 800236a <_svfiprintf_r+0x36>
 800234c:	2140      	movs	r1, #64	@ 0x40
 800234e:	f7ff ff09 	bl	8002164 <_malloc_r>
 8002352:	6028      	str	r0, [r5, #0]
 8002354:	6128      	str	r0, [r5, #16]
 8002356:	b930      	cbnz	r0, 8002366 <_svfiprintf_r+0x32>
 8002358:	230c      	movs	r3, #12
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	b01d      	add	sp, #116	@ 0x74
 8002362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002366:	2340      	movs	r3, #64	@ 0x40
 8002368:	616b      	str	r3, [r5, #20]
 800236a:	2300      	movs	r3, #0
 800236c:	9309      	str	r3, [sp, #36]	@ 0x24
 800236e:	2320      	movs	r3, #32
 8002370:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002374:	2330      	movs	r3, #48	@ 0x30
 8002376:	f04f 0901 	mov.w	r9, #1
 800237a:	f8cd 800c 	str.w	r8, [sp, #12]
 800237e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002518 <_svfiprintf_r+0x1e4>
 8002382:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002386:	4623      	mov	r3, r4
 8002388:	469a      	mov	sl, r3
 800238a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800238e:	b10a      	cbz	r2, 8002394 <_svfiprintf_r+0x60>
 8002390:	2a25      	cmp	r2, #37	@ 0x25
 8002392:	d1f9      	bne.n	8002388 <_svfiprintf_r+0x54>
 8002394:	ebba 0b04 	subs.w	fp, sl, r4
 8002398:	d00b      	beq.n	80023b2 <_svfiprintf_r+0x7e>
 800239a:	465b      	mov	r3, fp
 800239c:	4622      	mov	r2, r4
 800239e:	4629      	mov	r1, r5
 80023a0:	4638      	mov	r0, r7
 80023a2:	f7ff ff6b 	bl	800227c <__ssputs_r>
 80023a6:	3001      	adds	r0, #1
 80023a8:	f000 80a7 	beq.w	80024fa <_svfiprintf_r+0x1c6>
 80023ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80023ae:	445a      	add	r2, fp
 80023b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80023b2:	f89a 3000 	ldrb.w	r3, [sl]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 809f 	beq.w	80024fa <_svfiprintf_r+0x1c6>
 80023bc:	2300      	movs	r3, #0
 80023be:	f04f 32ff 	mov.w	r2, #4294967295
 80023c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023c6:	f10a 0a01 	add.w	sl, sl, #1
 80023ca:	9304      	str	r3, [sp, #16]
 80023cc:	9307      	str	r3, [sp, #28]
 80023ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80023d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80023d4:	4654      	mov	r4, sl
 80023d6:	2205      	movs	r2, #5
 80023d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023dc:	484e      	ldr	r0, [pc, #312]	@ (8002518 <_svfiprintf_r+0x1e4>)
 80023de:	f000 fa61 	bl	80028a4 <memchr>
 80023e2:	9a04      	ldr	r2, [sp, #16]
 80023e4:	b9d8      	cbnz	r0, 800241e <_svfiprintf_r+0xea>
 80023e6:	06d0      	lsls	r0, r2, #27
 80023e8:	bf44      	itt	mi
 80023ea:	2320      	movmi	r3, #32
 80023ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80023f0:	0711      	lsls	r1, r2, #28
 80023f2:	bf44      	itt	mi
 80023f4:	232b      	movmi	r3, #43	@ 0x2b
 80023f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80023fa:	f89a 3000 	ldrb.w	r3, [sl]
 80023fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8002400:	d015      	beq.n	800242e <_svfiprintf_r+0xfa>
 8002402:	4654      	mov	r4, sl
 8002404:	2000      	movs	r0, #0
 8002406:	f04f 0c0a 	mov.w	ip, #10
 800240a:	9a07      	ldr	r2, [sp, #28]
 800240c:	4621      	mov	r1, r4
 800240e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002412:	3b30      	subs	r3, #48	@ 0x30
 8002414:	2b09      	cmp	r3, #9
 8002416:	d94b      	bls.n	80024b0 <_svfiprintf_r+0x17c>
 8002418:	b1b0      	cbz	r0, 8002448 <_svfiprintf_r+0x114>
 800241a:	9207      	str	r2, [sp, #28]
 800241c:	e014      	b.n	8002448 <_svfiprintf_r+0x114>
 800241e:	eba0 0308 	sub.w	r3, r0, r8
 8002422:	fa09 f303 	lsl.w	r3, r9, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	46a2      	mov	sl, r4
 800242a:	9304      	str	r3, [sp, #16]
 800242c:	e7d2      	b.n	80023d4 <_svfiprintf_r+0xa0>
 800242e:	9b03      	ldr	r3, [sp, #12]
 8002430:	1d19      	adds	r1, r3, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	9103      	str	r1, [sp, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	bfbb      	ittet	lt
 800243a:	425b      	neglt	r3, r3
 800243c:	f042 0202 	orrlt.w	r2, r2, #2
 8002440:	9307      	strge	r3, [sp, #28]
 8002442:	9307      	strlt	r3, [sp, #28]
 8002444:	bfb8      	it	lt
 8002446:	9204      	strlt	r2, [sp, #16]
 8002448:	7823      	ldrb	r3, [r4, #0]
 800244a:	2b2e      	cmp	r3, #46	@ 0x2e
 800244c:	d10a      	bne.n	8002464 <_svfiprintf_r+0x130>
 800244e:	7863      	ldrb	r3, [r4, #1]
 8002450:	2b2a      	cmp	r3, #42	@ 0x2a
 8002452:	d132      	bne.n	80024ba <_svfiprintf_r+0x186>
 8002454:	9b03      	ldr	r3, [sp, #12]
 8002456:	3402      	adds	r4, #2
 8002458:	1d1a      	adds	r2, r3, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	9203      	str	r2, [sp, #12]
 800245e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002462:	9305      	str	r3, [sp, #20]
 8002464:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800251c <_svfiprintf_r+0x1e8>
 8002468:	2203      	movs	r2, #3
 800246a:	4650      	mov	r0, sl
 800246c:	7821      	ldrb	r1, [r4, #0]
 800246e:	f000 fa19 	bl	80028a4 <memchr>
 8002472:	b138      	cbz	r0, 8002484 <_svfiprintf_r+0x150>
 8002474:	2240      	movs	r2, #64	@ 0x40
 8002476:	9b04      	ldr	r3, [sp, #16]
 8002478:	eba0 000a 	sub.w	r0, r0, sl
 800247c:	4082      	lsls	r2, r0
 800247e:	4313      	orrs	r3, r2
 8002480:	3401      	adds	r4, #1
 8002482:	9304      	str	r3, [sp, #16]
 8002484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002488:	2206      	movs	r2, #6
 800248a:	4825      	ldr	r0, [pc, #148]	@ (8002520 <_svfiprintf_r+0x1ec>)
 800248c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002490:	f000 fa08 	bl	80028a4 <memchr>
 8002494:	2800      	cmp	r0, #0
 8002496:	d036      	beq.n	8002506 <_svfiprintf_r+0x1d2>
 8002498:	4b22      	ldr	r3, [pc, #136]	@ (8002524 <_svfiprintf_r+0x1f0>)
 800249a:	bb1b      	cbnz	r3, 80024e4 <_svfiprintf_r+0x1b0>
 800249c:	9b03      	ldr	r3, [sp, #12]
 800249e:	3307      	adds	r3, #7
 80024a0:	f023 0307 	bic.w	r3, r3, #7
 80024a4:	3308      	adds	r3, #8
 80024a6:	9303      	str	r3, [sp, #12]
 80024a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024aa:	4433      	add	r3, r6
 80024ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80024ae:	e76a      	b.n	8002386 <_svfiprintf_r+0x52>
 80024b0:	460c      	mov	r4, r1
 80024b2:	2001      	movs	r0, #1
 80024b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80024b8:	e7a8      	b.n	800240c <_svfiprintf_r+0xd8>
 80024ba:	2300      	movs	r3, #0
 80024bc:	f04f 0c0a 	mov.w	ip, #10
 80024c0:	4619      	mov	r1, r3
 80024c2:	3401      	adds	r4, #1
 80024c4:	9305      	str	r3, [sp, #20]
 80024c6:	4620      	mov	r0, r4
 80024c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024cc:	3a30      	subs	r2, #48	@ 0x30
 80024ce:	2a09      	cmp	r2, #9
 80024d0:	d903      	bls.n	80024da <_svfiprintf_r+0x1a6>
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0c6      	beq.n	8002464 <_svfiprintf_r+0x130>
 80024d6:	9105      	str	r1, [sp, #20]
 80024d8:	e7c4      	b.n	8002464 <_svfiprintf_r+0x130>
 80024da:	4604      	mov	r4, r0
 80024dc:	2301      	movs	r3, #1
 80024de:	fb0c 2101 	mla	r1, ip, r1, r2
 80024e2:	e7f0      	b.n	80024c6 <_svfiprintf_r+0x192>
 80024e4:	ab03      	add	r3, sp, #12
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	462a      	mov	r2, r5
 80024ea:	4638      	mov	r0, r7
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <_svfiprintf_r+0x1f4>)
 80024ee:	a904      	add	r1, sp, #16
 80024f0:	f3af 8000 	nop.w
 80024f4:	1c42      	adds	r2, r0, #1
 80024f6:	4606      	mov	r6, r0
 80024f8:	d1d6      	bne.n	80024a8 <_svfiprintf_r+0x174>
 80024fa:	89ab      	ldrh	r3, [r5, #12]
 80024fc:	065b      	lsls	r3, r3, #25
 80024fe:	f53f af2d 	bmi.w	800235c <_svfiprintf_r+0x28>
 8002502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002504:	e72c      	b.n	8002360 <_svfiprintf_r+0x2c>
 8002506:	ab03      	add	r3, sp, #12
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	462a      	mov	r2, r5
 800250c:	4638      	mov	r0, r7
 800250e:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <_svfiprintf_r+0x1f4>)
 8002510:	a904      	add	r1, sp, #16
 8002512:	f000 f87d 	bl	8002610 <_printf_i>
 8002516:	e7ed      	b.n	80024f4 <_svfiprintf_r+0x1c0>
 8002518:	080029d8 	.word	0x080029d8
 800251c:	080029de 	.word	0x080029de
 8002520:	080029e2 	.word	0x080029e2
 8002524:	00000000 	.word	0x00000000
 8002528:	0800227d 	.word	0x0800227d

0800252c <_printf_common>:
 800252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002530:	4616      	mov	r6, r2
 8002532:	4698      	mov	r8, r3
 8002534:	688a      	ldr	r2, [r1, #8]
 8002536:	690b      	ldr	r3, [r1, #16]
 8002538:	4607      	mov	r7, r0
 800253a:	4293      	cmp	r3, r2
 800253c:	bfb8      	it	lt
 800253e:	4613      	movlt	r3, r2
 8002540:	6033      	str	r3, [r6, #0]
 8002542:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002546:	460c      	mov	r4, r1
 8002548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800254c:	b10a      	cbz	r2, 8002552 <_printf_common+0x26>
 800254e:	3301      	adds	r3, #1
 8002550:	6033      	str	r3, [r6, #0]
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	0699      	lsls	r1, r3, #26
 8002556:	bf42      	ittt	mi
 8002558:	6833      	ldrmi	r3, [r6, #0]
 800255a:	3302      	addmi	r3, #2
 800255c:	6033      	strmi	r3, [r6, #0]
 800255e:	6825      	ldr	r5, [r4, #0]
 8002560:	f015 0506 	ands.w	r5, r5, #6
 8002564:	d106      	bne.n	8002574 <_printf_common+0x48>
 8002566:	f104 0a19 	add.w	sl, r4, #25
 800256a:	68e3      	ldr	r3, [r4, #12]
 800256c:	6832      	ldr	r2, [r6, #0]
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	42ab      	cmp	r3, r5
 8002572:	dc2b      	bgt.n	80025cc <_printf_common+0xa0>
 8002574:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002578:	6822      	ldr	r2, [r4, #0]
 800257a:	3b00      	subs	r3, #0
 800257c:	bf18      	it	ne
 800257e:	2301      	movne	r3, #1
 8002580:	0692      	lsls	r2, r2, #26
 8002582:	d430      	bmi.n	80025e6 <_printf_common+0xba>
 8002584:	4641      	mov	r1, r8
 8002586:	4638      	mov	r0, r7
 8002588:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800258c:	47c8      	blx	r9
 800258e:	3001      	adds	r0, #1
 8002590:	d023      	beq.n	80025da <_printf_common+0xae>
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	6922      	ldr	r2, [r4, #16]
 8002596:	f003 0306 	and.w	r3, r3, #6
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf14      	ite	ne
 800259e:	2500      	movne	r5, #0
 80025a0:	6833      	ldreq	r3, [r6, #0]
 80025a2:	f04f 0600 	mov.w	r6, #0
 80025a6:	bf08      	it	eq
 80025a8:	68e5      	ldreq	r5, [r4, #12]
 80025aa:	f104 041a 	add.w	r4, r4, #26
 80025ae:	bf08      	it	eq
 80025b0:	1aed      	subeq	r5, r5, r3
 80025b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80025b6:	bf08      	it	eq
 80025b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025bc:	4293      	cmp	r3, r2
 80025be:	bfc4      	itt	gt
 80025c0:	1a9b      	subgt	r3, r3, r2
 80025c2:	18ed      	addgt	r5, r5, r3
 80025c4:	42b5      	cmp	r5, r6
 80025c6:	d11a      	bne.n	80025fe <_printf_common+0xd2>
 80025c8:	2000      	movs	r0, #0
 80025ca:	e008      	b.n	80025de <_printf_common+0xb2>
 80025cc:	2301      	movs	r3, #1
 80025ce:	4652      	mov	r2, sl
 80025d0:	4641      	mov	r1, r8
 80025d2:	4638      	mov	r0, r7
 80025d4:	47c8      	blx	r9
 80025d6:	3001      	adds	r0, #1
 80025d8:	d103      	bne.n	80025e2 <_printf_common+0xb6>
 80025da:	f04f 30ff 	mov.w	r0, #4294967295
 80025de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025e2:	3501      	adds	r5, #1
 80025e4:	e7c1      	b.n	800256a <_printf_common+0x3e>
 80025e6:	2030      	movs	r0, #48	@ 0x30
 80025e8:	18e1      	adds	r1, r4, r3
 80025ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80025f4:	4422      	add	r2, r4
 80025f6:	3302      	adds	r3, #2
 80025f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80025fc:	e7c2      	b.n	8002584 <_printf_common+0x58>
 80025fe:	2301      	movs	r3, #1
 8002600:	4622      	mov	r2, r4
 8002602:	4641      	mov	r1, r8
 8002604:	4638      	mov	r0, r7
 8002606:	47c8      	blx	r9
 8002608:	3001      	adds	r0, #1
 800260a:	d0e6      	beq.n	80025da <_printf_common+0xae>
 800260c:	3601      	adds	r6, #1
 800260e:	e7d9      	b.n	80025c4 <_printf_common+0x98>

08002610 <_printf_i>:
 8002610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002614:	7e0f      	ldrb	r7, [r1, #24]
 8002616:	4691      	mov	r9, r2
 8002618:	2f78      	cmp	r7, #120	@ 0x78
 800261a:	4680      	mov	r8, r0
 800261c:	460c      	mov	r4, r1
 800261e:	469a      	mov	sl, r3
 8002620:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002626:	d807      	bhi.n	8002638 <_printf_i+0x28>
 8002628:	2f62      	cmp	r7, #98	@ 0x62
 800262a:	d80a      	bhi.n	8002642 <_printf_i+0x32>
 800262c:	2f00      	cmp	r7, #0
 800262e:	f000 80d3 	beq.w	80027d8 <_printf_i+0x1c8>
 8002632:	2f58      	cmp	r7, #88	@ 0x58
 8002634:	f000 80ba 	beq.w	80027ac <_printf_i+0x19c>
 8002638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800263c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002640:	e03a      	b.n	80026b8 <_printf_i+0xa8>
 8002642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002646:	2b15      	cmp	r3, #21
 8002648:	d8f6      	bhi.n	8002638 <_printf_i+0x28>
 800264a:	a101      	add	r1, pc, #4	@ (adr r1, 8002650 <_printf_i+0x40>)
 800264c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002650:	080026a9 	.word	0x080026a9
 8002654:	080026bd 	.word	0x080026bd
 8002658:	08002639 	.word	0x08002639
 800265c:	08002639 	.word	0x08002639
 8002660:	08002639 	.word	0x08002639
 8002664:	08002639 	.word	0x08002639
 8002668:	080026bd 	.word	0x080026bd
 800266c:	08002639 	.word	0x08002639
 8002670:	08002639 	.word	0x08002639
 8002674:	08002639 	.word	0x08002639
 8002678:	08002639 	.word	0x08002639
 800267c:	080027bf 	.word	0x080027bf
 8002680:	080026e7 	.word	0x080026e7
 8002684:	08002779 	.word	0x08002779
 8002688:	08002639 	.word	0x08002639
 800268c:	08002639 	.word	0x08002639
 8002690:	080027e1 	.word	0x080027e1
 8002694:	08002639 	.word	0x08002639
 8002698:	080026e7 	.word	0x080026e7
 800269c:	08002639 	.word	0x08002639
 80026a0:	08002639 	.word	0x08002639
 80026a4:	08002781 	.word	0x08002781
 80026a8:	6833      	ldr	r3, [r6, #0]
 80026aa:	1d1a      	adds	r2, r3, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6032      	str	r2, [r6, #0]
 80026b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80026b8:	2301      	movs	r3, #1
 80026ba:	e09e      	b.n	80027fa <_printf_i+0x1ea>
 80026bc:	6833      	ldr	r3, [r6, #0]
 80026be:	6820      	ldr	r0, [r4, #0]
 80026c0:	1d19      	adds	r1, r3, #4
 80026c2:	6031      	str	r1, [r6, #0]
 80026c4:	0606      	lsls	r6, r0, #24
 80026c6:	d501      	bpl.n	80026cc <_printf_i+0xbc>
 80026c8:	681d      	ldr	r5, [r3, #0]
 80026ca:	e003      	b.n	80026d4 <_printf_i+0xc4>
 80026cc:	0645      	lsls	r5, r0, #25
 80026ce:	d5fb      	bpl.n	80026c8 <_printf_i+0xb8>
 80026d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80026d4:	2d00      	cmp	r5, #0
 80026d6:	da03      	bge.n	80026e0 <_printf_i+0xd0>
 80026d8:	232d      	movs	r3, #45	@ 0x2d
 80026da:	426d      	negs	r5, r5
 80026dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026e0:	230a      	movs	r3, #10
 80026e2:	4859      	ldr	r0, [pc, #356]	@ (8002848 <_printf_i+0x238>)
 80026e4:	e011      	b.n	800270a <_printf_i+0xfa>
 80026e6:	6821      	ldr	r1, [r4, #0]
 80026e8:	6833      	ldr	r3, [r6, #0]
 80026ea:	0608      	lsls	r0, r1, #24
 80026ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80026f0:	d402      	bmi.n	80026f8 <_printf_i+0xe8>
 80026f2:	0649      	lsls	r1, r1, #25
 80026f4:	bf48      	it	mi
 80026f6:	b2ad      	uxthmi	r5, r5
 80026f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80026fa:	6033      	str	r3, [r6, #0]
 80026fc:	bf14      	ite	ne
 80026fe:	230a      	movne	r3, #10
 8002700:	2308      	moveq	r3, #8
 8002702:	4851      	ldr	r0, [pc, #324]	@ (8002848 <_printf_i+0x238>)
 8002704:	2100      	movs	r1, #0
 8002706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800270a:	6866      	ldr	r6, [r4, #4]
 800270c:	2e00      	cmp	r6, #0
 800270e:	bfa8      	it	ge
 8002710:	6821      	ldrge	r1, [r4, #0]
 8002712:	60a6      	str	r6, [r4, #8]
 8002714:	bfa4      	itt	ge
 8002716:	f021 0104 	bicge.w	r1, r1, #4
 800271a:	6021      	strge	r1, [r4, #0]
 800271c:	b90d      	cbnz	r5, 8002722 <_printf_i+0x112>
 800271e:	2e00      	cmp	r6, #0
 8002720:	d04b      	beq.n	80027ba <_printf_i+0x1aa>
 8002722:	4616      	mov	r6, r2
 8002724:	fbb5 f1f3 	udiv	r1, r5, r3
 8002728:	fb03 5711 	mls	r7, r3, r1, r5
 800272c:	5dc7      	ldrb	r7, [r0, r7]
 800272e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002732:	462f      	mov	r7, r5
 8002734:	42bb      	cmp	r3, r7
 8002736:	460d      	mov	r5, r1
 8002738:	d9f4      	bls.n	8002724 <_printf_i+0x114>
 800273a:	2b08      	cmp	r3, #8
 800273c:	d10b      	bne.n	8002756 <_printf_i+0x146>
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	07df      	lsls	r7, r3, #31
 8002742:	d508      	bpl.n	8002756 <_printf_i+0x146>
 8002744:	6923      	ldr	r3, [r4, #16]
 8002746:	6861      	ldr	r1, [r4, #4]
 8002748:	4299      	cmp	r1, r3
 800274a:	bfde      	ittt	le
 800274c:	2330      	movle	r3, #48	@ 0x30
 800274e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002752:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002756:	1b92      	subs	r2, r2, r6
 8002758:	6122      	str	r2, [r4, #16]
 800275a:	464b      	mov	r3, r9
 800275c:	4621      	mov	r1, r4
 800275e:	4640      	mov	r0, r8
 8002760:	f8cd a000 	str.w	sl, [sp]
 8002764:	aa03      	add	r2, sp, #12
 8002766:	f7ff fee1 	bl	800252c <_printf_common>
 800276a:	3001      	adds	r0, #1
 800276c:	d14a      	bne.n	8002804 <_printf_i+0x1f4>
 800276e:	f04f 30ff 	mov.w	r0, #4294967295
 8002772:	b004      	add	sp, #16
 8002774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	f043 0320 	orr.w	r3, r3, #32
 800277e:	6023      	str	r3, [r4, #0]
 8002780:	2778      	movs	r7, #120	@ 0x78
 8002782:	4832      	ldr	r0, [pc, #200]	@ (800284c <_printf_i+0x23c>)
 8002784:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	6831      	ldr	r1, [r6, #0]
 800278c:	061f      	lsls	r7, r3, #24
 800278e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002792:	d402      	bmi.n	800279a <_printf_i+0x18a>
 8002794:	065f      	lsls	r7, r3, #25
 8002796:	bf48      	it	mi
 8002798:	b2ad      	uxthmi	r5, r5
 800279a:	6031      	str	r1, [r6, #0]
 800279c:	07d9      	lsls	r1, r3, #31
 800279e:	bf44      	itt	mi
 80027a0:	f043 0320 	orrmi.w	r3, r3, #32
 80027a4:	6023      	strmi	r3, [r4, #0]
 80027a6:	b11d      	cbz	r5, 80027b0 <_printf_i+0x1a0>
 80027a8:	2310      	movs	r3, #16
 80027aa:	e7ab      	b.n	8002704 <_printf_i+0xf4>
 80027ac:	4826      	ldr	r0, [pc, #152]	@ (8002848 <_printf_i+0x238>)
 80027ae:	e7e9      	b.n	8002784 <_printf_i+0x174>
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	f023 0320 	bic.w	r3, r3, #32
 80027b6:	6023      	str	r3, [r4, #0]
 80027b8:	e7f6      	b.n	80027a8 <_printf_i+0x198>
 80027ba:	4616      	mov	r6, r2
 80027bc:	e7bd      	b.n	800273a <_printf_i+0x12a>
 80027be:	6833      	ldr	r3, [r6, #0]
 80027c0:	6825      	ldr	r5, [r4, #0]
 80027c2:	1d18      	adds	r0, r3, #4
 80027c4:	6961      	ldr	r1, [r4, #20]
 80027c6:	6030      	str	r0, [r6, #0]
 80027c8:	062e      	lsls	r6, r5, #24
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	d501      	bpl.n	80027d2 <_printf_i+0x1c2>
 80027ce:	6019      	str	r1, [r3, #0]
 80027d0:	e002      	b.n	80027d8 <_printf_i+0x1c8>
 80027d2:	0668      	lsls	r0, r5, #25
 80027d4:	d5fb      	bpl.n	80027ce <_printf_i+0x1be>
 80027d6:	8019      	strh	r1, [r3, #0]
 80027d8:	2300      	movs	r3, #0
 80027da:	4616      	mov	r6, r2
 80027dc:	6123      	str	r3, [r4, #16]
 80027de:	e7bc      	b.n	800275a <_printf_i+0x14a>
 80027e0:	6833      	ldr	r3, [r6, #0]
 80027e2:	2100      	movs	r1, #0
 80027e4:	1d1a      	adds	r2, r3, #4
 80027e6:	6032      	str	r2, [r6, #0]
 80027e8:	681e      	ldr	r6, [r3, #0]
 80027ea:	6862      	ldr	r2, [r4, #4]
 80027ec:	4630      	mov	r0, r6
 80027ee:	f000 f859 	bl	80028a4 <memchr>
 80027f2:	b108      	cbz	r0, 80027f8 <_printf_i+0x1e8>
 80027f4:	1b80      	subs	r0, r0, r6
 80027f6:	6060      	str	r0, [r4, #4]
 80027f8:	6863      	ldr	r3, [r4, #4]
 80027fa:	6123      	str	r3, [r4, #16]
 80027fc:	2300      	movs	r3, #0
 80027fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002802:	e7aa      	b.n	800275a <_printf_i+0x14a>
 8002804:	4632      	mov	r2, r6
 8002806:	4649      	mov	r1, r9
 8002808:	4640      	mov	r0, r8
 800280a:	6923      	ldr	r3, [r4, #16]
 800280c:	47d0      	blx	sl
 800280e:	3001      	adds	r0, #1
 8002810:	d0ad      	beq.n	800276e <_printf_i+0x15e>
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	079b      	lsls	r3, r3, #30
 8002816:	d413      	bmi.n	8002840 <_printf_i+0x230>
 8002818:	68e0      	ldr	r0, [r4, #12]
 800281a:	9b03      	ldr	r3, [sp, #12]
 800281c:	4298      	cmp	r0, r3
 800281e:	bfb8      	it	lt
 8002820:	4618      	movlt	r0, r3
 8002822:	e7a6      	b.n	8002772 <_printf_i+0x162>
 8002824:	2301      	movs	r3, #1
 8002826:	4632      	mov	r2, r6
 8002828:	4649      	mov	r1, r9
 800282a:	4640      	mov	r0, r8
 800282c:	47d0      	blx	sl
 800282e:	3001      	adds	r0, #1
 8002830:	d09d      	beq.n	800276e <_printf_i+0x15e>
 8002832:	3501      	adds	r5, #1
 8002834:	68e3      	ldr	r3, [r4, #12]
 8002836:	9903      	ldr	r1, [sp, #12]
 8002838:	1a5b      	subs	r3, r3, r1
 800283a:	42ab      	cmp	r3, r5
 800283c:	dcf2      	bgt.n	8002824 <_printf_i+0x214>
 800283e:	e7eb      	b.n	8002818 <_printf_i+0x208>
 8002840:	2500      	movs	r5, #0
 8002842:	f104 0619 	add.w	r6, r4, #25
 8002846:	e7f5      	b.n	8002834 <_printf_i+0x224>
 8002848:	080029e9 	.word	0x080029e9
 800284c:	080029fa 	.word	0x080029fa

08002850 <memmove>:
 8002850:	4288      	cmp	r0, r1
 8002852:	b510      	push	{r4, lr}
 8002854:	eb01 0402 	add.w	r4, r1, r2
 8002858:	d902      	bls.n	8002860 <memmove+0x10>
 800285a:	4284      	cmp	r4, r0
 800285c:	4623      	mov	r3, r4
 800285e:	d807      	bhi.n	8002870 <memmove+0x20>
 8002860:	1e43      	subs	r3, r0, #1
 8002862:	42a1      	cmp	r1, r4
 8002864:	d008      	beq.n	8002878 <memmove+0x28>
 8002866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800286a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800286e:	e7f8      	b.n	8002862 <memmove+0x12>
 8002870:	4601      	mov	r1, r0
 8002872:	4402      	add	r2, r0
 8002874:	428a      	cmp	r2, r1
 8002876:	d100      	bne.n	800287a <memmove+0x2a>
 8002878:	bd10      	pop	{r4, pc}
 800287a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800287e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002882:	e7f7      	b.n	8002874 <memmove+0x24>

08002884 <_sbrk_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	2300      	movs	r3, #0
 8002888:	4d05      	ldr	r5, [pc, #20]	@ (80028a0 <_sbrk_r+0x1c>)
 800288a:	4604      	mov	r4, r0
 800288c:	4608      	mov	r0, r1
 800288e:	602b      	str	r3, [r5, #0]
 8002890:	f7ff fa98 	bl	8001dc4 <_sbrk>
 8002894:	1c43      	adds	r3, r0, #1
 8002896:	d102      	bne.n	800289e <_sbrk_r+0x1a>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	b103      	cbz	r3, 800289e <_sbrk_r+0x1a>
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	200002f8 	.word	0x200002f8

080028a4 <memchr>:
 80028a4:	4603      	mov	r3, r0
 80028a6:	b510      	push	{r4, lr}
 80028a8:	b2c9      	uxtb	r1, r1
 80028aa:	4402      	add	r2, r0
 80028ac:	4293      	cmp	r3, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	d101      	bne.n	80028b6 <memchr+0x12>
 80028b2:	2000      	movs	r0, #0
 80028b4:	e003      	b.n	80028be <memchr+0x1a>
 80028b6:	7804      	ldrb	r4, [r0, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	428c      	cmp	r4, r1
 80028bc:	d1f6      	bne.n	80028ac <memchr+0x8>
 80028be:	bd10      	pop	{r4, pc}

080028c0 <memcpy>:
 80028c0:	440a      	add	r2, r1
 80028c2:	4291      	cmp	r1, r2
 80028c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80028c8:	d100      	bne.n	80028cc <memcpy+0xc>
 80028ca:	4770      	bx	lr
 80028cc:	b510      	push	{r4, lr}
 80028ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028d2:	4291      	cmp	r1, r2
 80028d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028d8:	d1f9      	bne.n	80028ce <memcpy+0xe>
 80028da:	bd10      	pop	{r4, pc}

080028dc <_realloc_r>:
 80028dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028e0:	4680      	mov	r8, r0
 80028e2:	4615      	mov	r5, r2
 80028e4:	460c      	mov	r4, r1
 80028e6:	b921      	cbnz	r1, 80028f2 <_realloc_r+0x16>
 80028e8:	4611      	mov	r1, r2
 80028ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028ee:	f7ff bc39 	b.w	8002164 <_malloc_r>
 80028f2:	b92a      	cbnz	r2, 8002900 <_realloc_r+0x24>
 80028f4:	f7ff fbcc 	bl	8002090 <_free_r>
 80028f8:	2400      	movs	r4, #0
 80028fa:	4620      	mov	r0, r4
 80028fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002900:	f000 f81a 	bl	8002938 <_malloc_usable_size_r>
 8002904:	4285      	cmp	r5, r0
 8002906:	4606      	mov	r6, r0
 8002908:	d802      	bhi.n	8002910 <_realloc_r+0x34>
 800290a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800290e:	d8f4      	bhi.n	80028fa <_realloc_r+0x1e>
 8002910:	4629      	mov	r1, r5
 8002912:	4640      	mov	r0, r8
 8002914:	f7ff fc26 	bl	8002164 <_malloc_r>
 8002918:	4607      	mov	r7, r0
 800291a:	2800      	cmp	r0, #0
 800291c:	d0ec      	beq.n	80028f8 <_realloc_r+0x1c>
 800291e:	42b5      	cmp	r5, r6
 8002920:	462a      	mov	r2, r5
 8002922:	4621      	mov	r1, r4
 8002924:	bf28      	it	cs
 8002926:	4632      	movcs	r2, r6
 8002928:	f7ff ffca 	bl	80028c0 <memcpy>
 800292c:	4621      	mov	r1, r4
 800292e:	4640      	mov	r0, r8
 8002930:	f7ff fbae 	bl	8002090 <_free_r>
 8002934:	463c      	mov	r4, r7
 8002936:	e7e0      	b.n	80028fa <_realloc_r+0x1e>

08002938 <_malloc_usable_size_r>:
 8002938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800293c:	1f18      	subs	r0, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	bfbc      	itt	lt
 8002942:	580b      	ldrlt	r3, [r1, r0]
 8002944:	18c0      	addlt	r0, r0, r3
 8002946:	4770      	bx	lr

08002948 <_init>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	bf00      	nop
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr

08002954 <_fini>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	bf00      	nop
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr
