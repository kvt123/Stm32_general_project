
Lcd_I2c_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000144c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800157c  0800157c  0000257c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800158c  0800158c  0000301c  2**0
                  CONTENTS
  4 .ARM          00000000  0800158c  0800158c  0000301c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800158c  0800158c  0000301c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800158c  0800158c  0000258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001590  08001590  00002590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08001594  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  2000001c  080015b0  0000301c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080015b0  00003070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000301c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040cc  00000000  00000000  00003045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000156e  00000000  00000000  00007111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00008680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000426  00000000  00000000  00008c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ce30  00000000  00000000  0000907e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006212  00000000  00000000  00015eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003fe8f  00000000  00000000  0001c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005bf4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000157c  00000000  00000000  0005bf94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0005d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000001c 	.word	0x2000001c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001564 	.word	0x08001564

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000020 	.word	0x20000020
 800016c:	08001564 	.word	0x08001564

08000170 <NVIC_SetPriority>:
 * interrupt, or negative to specify an internal (core) interrupt.
 *
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	6039      	str	r1, [r7, #0]
 800017a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000180:	2b00      	cmp	r3, #0
 8000182:	da0b      	bge.n	800019c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	b2da      	uxtb	r2, r3
 8000188:	490c      	ldr	r1, [pc, #48]	@ (80001bc <NVIC_SetPriority+0x4c>)
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	f003 030f 	and.w	r3, r3, #15
 8000190:	3b04      	subs	r3, #4
 8000192:	0112      	lsls	r2, r2, #4
 8000194:	b2d2      	uxtb	r2, r2
 8000196:	440b      	add	r3, r1
 8000198:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800019a:	e009      	b.n	80001b0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800019c:	683b      	ldr	r3, [r7, #0]
 800019e:	b2da      	uxtb	r2, r3
 80001a0:	4907      	ldr	r1, [pc, #28]	@ (80001c0 <NVIC_SetPriority+0x50>)
 80001a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a6:	0112      	lsls	r2, r2, #4
 80001a8:	b2d2      	uxtb	r2, r2
 80001aa:	440b      	add	r3, r1
 80001ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	e000ed00 	.word	0xe000ed00
 80001c0:	e000e100 	.word	0xe000e100

080001c4 <SysTick_Config>:
 * Initialise the system tick timer and its interrupt and start the
 * system tick timer / counter in free running mode to generate 
 * periodical interrupts.
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80001d2:	d301      	bcc.n	80001d8 <SysTick_Config+0x14>
 80001d4:	2301      	movs	r3, #1
 80001d6:	e011      	b.n	80001fc <SysTick_Config+0x38>
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80001de:	4a09      	ldr	r2, [pc, #36]	@ (8000204 <SysTick_Config+0x40>)
 80001e0:	3b01      	subs	r3, #1
 80001e2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80001e4:	210f      	movs	r1, #15
 80001e6:	f04f 30ff 	mov.w	r0, #4294967295
 80001ea:	f7ff ffc1 	bl	8000170 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ee:	4b05      	ldr	r3, [pc, #20]	@ (8000204 <SysTick_Config+0x40>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 80001f4:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <SysTick_Config+0x40>)
 80001f6:	2207      	movs	r2, #7
 80001f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   | 
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80001fa:	2300      	movs	r3, #0
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	e000e010 	.word	0xe000e010

08000208 <Init_LCD>:
#include "app.h"

void Init_LCD()
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* timer initialize */
    if (SysTick_Config(SystemCoreClock / 1000))
 800020c:	4b09      	ldr	r3, [pc, #36]	@ (8000234 <Init_LCD+0x2c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a09      	ldr	r2, [pc, #36]	@ (8000238 <Init_LCD+0x30>)
 8000212:	fba2 2303 	umull	r2, r3, r2, r3
 8000216:	099b      	lsrs	r3, r3, #6
 8000218:	4618      	mov	r0, r3
 800021a:	f7ff ffd3 	bl	80001c4 <SysTick_Config>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <Init_LCD+0x20>
    { 
      /* Capture error */ 
      while (1);
 8000224:	bf00      	nop
 8000226:	e7fd      	b.n	8000224 <Init_LCD+0x1c>
    }
    I2c_Midderware_Init();
 8000228:	f000 ffc0 	bl	80011ac <I2c_Midderware_Init>
    lcd_init();
 800022c:	f000 ff2e 	bl	800108c <lcd_init>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000018 	.word	0x20000018
 8000238:	10624dd3 	.word	0x10624dd3

0800023c <display>:
void display(char Buffer[])
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  lcd_gotoxy(1, 1);
 8000244:	2101      	movs	r1, #1
 8000246:	2001      	movs	r0, #1
 8000248:	f000 feee 	bl	8001028 <lcd_gotoxy>
  lcd_puts(Buffer);
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f000 ff5a 	bl	8001106 <lcd_puts>
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800025c:	b480      	push	{r7}
 800025e:	b087      	sub	sp, #28
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000264:	2300      	movs	r3, #0
 8000266:	617b      	str	r3, [r7, #20]
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]
 800026c:	230f      	movs	r3, #15
 800026e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	78db      	ldrb	r3, [r3, #3]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d03a      	beq.n	80002ee <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000278:	4b27      	ldr	r3, [pc, #156]	@ (8000318 <NVIC_Init+0xbc>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	43db      	mvns	r3, r3
 800027e:	0a1b      	lsrs	r3, r3, #8
 8000280:	f003 0307 	and.w	r3, r3, #7
 8000284:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	f1c3 0304 	rsb	r3, r3, #4
 800028c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	fa22 f303 	lsr.w	r3, r2, r3
 8000296:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	785b      	ldrb	r3, [r3, #1]
 800029c:	461a      	mov	r2, r3
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	fa02 f303 	lsl.w	r3, r2, r3
 80002a4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	789b      	ldrb	r3, [r3, #2]
 80002aa:	461a      	mov	r2, r3
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	4013      	ands	r3, r2
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	4313      	orrs	r3, r2
 80002b4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	011b      	lsls	r3, r3, #4
 80002ba:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80002bc:	4a17      	ldr	r2, [pc, #92]	@ (800031c <NVIC_Init+0xc0>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	6979      	ldr	r1, [r7, #20]
 80002c4:	b2c9      	uxtb	r1, r1
 80002c6:	4413      	add	r3, r2
 80002c8:	460a      	mov	r2, r1
 80002ca:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002d6:	4911      	ldr	r1, [pc, #68]	@ (800031c <NVIC_Init+0xc0>)
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	7812      	ldrb	r2, [r2, #0]
 80002dc:	0952      	lsrs	r2, r2, #5
 80002de:	b2d2      	uxtb	r2, r2
 80002e0:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002e2:	2201      	movs	r2, #1
 80002e4:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002e8:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80002ec:	e00f      	b.n	800030e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002f6:	4909      	ldr	r1, [pc, #36]	@ (800031c <NVIC_Init+0xc0>)
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	7812      	ldrb	r2, [r2, #0]
 80002fc:	0952      	lsrs	r2, r2, #5
 80002fe:	b2d2      	uxtb	r2, r2
 8000300:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000302:	2201      	movs	r2, #1
 8000304:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000306:	f100 0320 	add.w	r3, r0, #32
 800030a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800030e:	bf00      	nop
 8000310:	371c      	adds	r7, #28
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	e000ed00 	.word	0xe000ed00
 800031c:	e000e100 	.word	0xe000e100

08000320 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8000330:	4013      	ands	r3, r2
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2200      	movs	r2, #0
 8000340:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a43      	ldr	r2, [pc, #268]	@ (8000460 <DMA_DeInit+0x140>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000356:	4b43      	ldr	r3, [pc, #268]	@ (8000464 <DMA_DeInit+0x144>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	4a42      	ldr	r2, [pc, #264]	@ (8000464 <DMA_DeInit+0x144>)
 800035c:	f043 030f 	orr.w	r3, r3, #15
 8000360:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8000362:	e077      	b.n	8000454 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a40      	ldr	r2, [pc, #256]	@ (8000468 <DMA_DeInit+0x148>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 800036c:	4b3d      	ldr	r3, [pc, #244]	@ (8000464 <DMA_DeInit+0x144>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	4a3c      	ldr	r2, [pc, #240]	@ (8000464 <DMA_DeInit+0x144>)
 8000372:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000376:	6053      	str	r3, [r2, #4]
}
 8000378:	e06c      	b.n	8000454 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a3b      	ldr	r2, [pc, #236]	@ (800046c <DMA_DeInit+0x14c>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000382:	4b38      	ldr	r3, [pc, #224]	@ (8000464 <DMA_DeInit+0x144>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4a37      	ldr	r2, [pc, #220]	@ (8000464 <DMA_DeInit+0x144>)
 8000388:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 800038c:	6053      	str	r3, [r2, #4]
}
 800038e:	e061      	b.n	8000454 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a37      	ldr	r2, [pc, #220]	@ (8000470 <DMA_DeInit+0x150>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000398:	4b32      	ldr	r3, [pc, #200]	@ (8000464 <DMA_DeInit+0x144>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	4a31      	ldr	r2, [pc, #196]	@ (8000464 <DMA_DeInit+0x144>)
 800039e:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 80003a2:	6053      	str	r3, [r2, #4]
}
 80003a4:	e056      	b.n	8000454 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a32      	ldr	r2, [pc, #200]	@ (8000474 <DMA_DeInit+0x154>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 80003ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000464 <DMA_DeInit+0x144>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000464 <DMA_DeInit+0x144>)
 80003b4:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 80003b8:	6053      	str	r3, [r2, #4]
}
 80003ba:	e04b      	b.n	8000454 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a2e      	ldr	r2, [pc, #184]	@ (8000478 <DMA_DeInit+0x158>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 80003c4:	4b27      	ldr	r3, [pc, #156]	@ (8000464 <DMA_DeInit+0x144>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	4a26      	ldr	r2, [pc, #152]	@ (8000464 <DMA_DeInit+0x144>)
 80003ca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003ce:	6053      	str	r3, [r2, #4]
}
 80003d0:	e040      	b.n	8000454 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a29      	ldr	r2, [pc, #164]	@ (800047c <DMA_DeInit+0x15c>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 80003da:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <DMA_DeInit+0x144>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	4a21      	ldr	r2, [pc, #132]	@ (8000464 <DMA_DeInit+0x144>)
 80003e0:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 80003e4:	6053      	str	r3, [r2, #4]
}
 80003e6:	e035      	b.n	8000454 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a25      	ldr	r2, [pc, #148]	@ (8000480 <DMA_DeInit+0x160>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 80003f0:	4b24      	ldr	r3, [pc, #144]	@ (8000484 <DMA_DeInit+0x164>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	4a23      	ldr	r2, [pc, #140]	@ (8000484 <DMA_DeInit+0x164>)
 80003f6:	f043 030f 	orr.w	r3, r3, #15
 80003fa:	6053      	str	r3, [r2, #4]
}
 80003fc:	e02a      	b.n	8000454 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a21      	ldr	r2, [pc, #132]	@ (8000488 <DMA_DeInit+0x168>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000406:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <DMA_DeInit+0x164>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	4a1e      	ldr	r2, [pc, #120]	@ (8000484 <DMA_DeInit+0x164>)
 800040c:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000410:	6053      	str	r3, [r2, #4]
}
 8000412:	e01f      	b.n	8000454 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a1d      	ldr	r2, [pc, #116]	@ (800048c <DMA_DeInit+0x16c>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 800041c:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <DMA_DeInit+0x164>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	4a18      	ldr	r2, [pc, #96]	@ (8000484 <DMA_DeInit+0x164>)
 8000422:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000426:	6053      	str	r3, [r2, #4]
}
 8000428:	e014      	b.n	8000454 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a18      	ldr	r2, [pc, #96]	@ (8000490 <DMA_DeInit+0x170>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000432:	4b14      	ldr	r3, [pc, #80]	@ (8000484 <DMA_DeInit+0x164>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	4a13      	ldr	r2, [pc, #76]	@ (8000484 <DMA_DeInit+0x164>)
 8000438:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 800043c:	6053      	str	r3, [r2, #4]
}
 800043e:	e009      	b.n	8000454 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a14      	ldr	r2, [pc, #80]	@ (8000494 <DMA_DeInit+0x174>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d105      	bne.n	8000454 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000448:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <DMA_DeInit+0x164>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	4a0d      	ldr	r2, [pc, #52]	@ (8000484 <DMA_DeInit+0x164>)
 800044e:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000452:	6053      	str	r3, [r2, #4]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40020008 	.word	0x40020008
 8000464:	40020000 	.word	0x40020000
 8000468:	4002001c 	.word	0x4002001c
 800046c:	40020030 	.word	0x40020030
 8000470:	40020044 	.word	0x40020044
 8000474:	40020058 	.word	0x40020058
 8000478:	4002006c 	.word	0x4002006c
 800047c:	40020080 	.word	0x40020080
 8000480:	40020408 	.word	0x40020408
 8000484:	40020400 	.word	0x40020400
 8000488:	4002041c 	.word	0x4002041c
 800048c:	40020430 	.word	0x40020430
 8000490:	40020444 	.word	0x40020444
 8000494:	40020458 	.word	0x40020458

08000498 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80004b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80004b6:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	689a      	ldr	r2, [r3, #8]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004c6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004d2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004de:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004e4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	68da      	ldr	r2, [r3, #12]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	685a      	ldr	r2, [r3, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	60da      	str	r2, [r3, #12]
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */

  if (NewState != DISABLE)
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d006      	beq.n	8000534 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f043 0201 	orr.w	r2, r3, #1
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000532:	e006      	b.n	8000542 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800053c:	4013      	ands	r3, r2
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	6013      	str	r3, [r2, #0]
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	4613      	mov	r3, r2
 8000558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  if (NewState != DISABLE)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d006      	beq.n	800056e <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	431a      	orrs	r2, r3
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 800056c:	e006      	b.n	800057c <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR &= ~DMA_IT;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	43db      	mvns	r3, r3
 8000576:	401a      	ands	r2, r3
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
	...

08000588 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d003      	beq.n	80005aa <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <DMA_GetFlagStatus+0x48>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	e002      	b.n	80005b0 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <DMA_GetFlagStatus+0x4c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	e001      	b.n	80005c4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	40020400 	.word	0x40020400
 80005d4:	40020000 	.word	0x40020000

080005d8 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d003      	beq.n	80005f2 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80005ea:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <DMA_ClearFlag+0x2c>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 80005f0:	e002      	b.n	80005f8 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <DMA_ClearFlag+0x30>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6053      	str	r3, [r2, #4]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40020400 	.word	0x40020400
 8000608:	40020000 	.word	0x40020000

0800060c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800060c:	b480      	push	{r7}
 800060e:	b089      	sub	sp, #36	@ 0x24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	78db      	ldrb	r3, [r3, #3]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	78db      	ldrb	r3, [r3, #3]
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	2b00      	cmp	r3, #0
 8000642:	d005      	beq.n	8000650 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	789b      	ldrb	r3, [r3, #2]
 8000648:	461a      	mov	r2, r3
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	4313      	orrs	r3, r2
 800064e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d044      	beq.n	80006e4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	e038      	b.n	80006d8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000666:	2201      	movs	r2, #1
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4013      	ands	r3, r2
 800067a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	429a      	cmp	r2, r3
 8000682:	d126      	bne.n	80006d2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800068a:	220f      	movs	r2, #15
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	43db      	mvns	r3, r3
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	4013      	ands	r3, r2
 800069c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800069e:	69fa      	ldr	r2, [r7, #28]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	78db      	ldrb	r3, [r3, #3]
 80006b0:	2b28      	cmp	r3, #40	@ 0x28
 80006b2:	d105      	bne.n	80006c0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80006b4:	2201      	movs	r2, #1
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	409a      	lsls	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	615a      	str	r2, [r3, #20]
 80006be:	e008      	b.n	80006d2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	2b48      	cmp	r3, #72	@ 0x48
 80006c6:	d104      	bne.n	80006d2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80006c8:	2201      	movs	r2, #1
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	409a      	lsls	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	3301      	adds	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	2b07      	cmp	r3, #7
 80006dc:	d9c3      	bls.n	8000666 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	2bff      	cmp	r3, #255	@ 0xff
 80006ea:	d946      	bls.n	800077a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	e03a      	b.n	800076e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	3308      	adds	r3, #8
 80006fc:	2201      	movs	r2, #1
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	429a      	cmp	r2, r3
 8000716:	d127      	bne.n	8000768 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800071e:	220f      	movs	r2, #15
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	43db      	mvns	r3, r3
 800072c:	697a      	ldr	r2, [r7, #20]
 800072e:	4013      	ands	r3, r2
 8000730:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000732:	69fa      	ldr	r2, [r7, #28]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	4313      	orrs	r3, r2
 800073e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	78db      	ldrb	r3, [r3, #3]
 8000744:	2b28      	cmp	r3, #40	@ 0x28
 8000746:	d105      	bne.n	8000754 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	3308      	adds	r3, #8
 800074c:	2201      	movs	r2, #1
 800074e:	409a      	lsls	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	78db      	ldrb	r3, [r3, #3]
 8000758:	2b48      	cmp	r3, #72	@ 0x48
 800075a:	d105      	bne.n	8000768 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	3308      	adds	r3, #8
 8000760:	2201      	movs	r2, #1
 8000762:	409a      	lsls	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	3301      	adds	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	2b07      	cmp	r3, #7
 8000772:	d9c1      	bls.n	80006f8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	605a      	str	r2, [r3, #4]
  }
}
 800077a:	bf00      	nop
 800077c:	3724      	adds	r7, #36	@ 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000792:	2300      	movs	r3, #0
 8000794:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t result = 0x04;
 8000796:	2304      	movs	r3, #4
 8000798:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint32_t pclk1 = 8000000;
 800079a:	4b57      	ldr	r3, [pc, #348]	@ (80008f8 <I2C_Init+0x174>)
 800079c:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef  rcc_clocks;
  /* Check the parameters */

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	889b      	ldrh	r3, [r3, #4]
 80007a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 80007a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f9a3 	bl	8000afc <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	4a4f      	ldr	r2, [pc, #316]	@ (80008fc <I2C_Init+0x178>)
 80007be:	fba2 2303 	umull	r2, r3, r2, r3
 80007c2:	0c9b      	lsrs	r3, r3, #18
 80007c4:	847b      	strh	r3, [r7, #34]	@ 0x22
  tmpreg |= freqrange;
 80007c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80007c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80007ca:	4313      	orrs	r3, r2
 80007cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80007d2:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	b29a      	uxth	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a44      	ldr	r2, [pc, #272]	@ (8000900 <I2C_Init+0x17c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d815      	bhi.n	800081e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	69fa      	ldr	r2, [r7, #28]
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000800:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000802:	2b03      	cmp	r3, #3
 8000804:	d801      	bhi.n	800080a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000806:	2304      	movs	r3, #4
 8000808:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800080a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800080c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800080e:	4313      	orrs	r3, r2
 8000810:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000812:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000814:	3301      	adds	r3, #1
 8000816:	b29a      	uxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	841a      	strh	r2, [r3, #32]
 800081c:	e040      	b.n	80008a0 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	88db      	ldrh	r3, [r3, #6]
 8000822:	f64b 72ff 	movw	r2, #49151	@ 0xbfff
 8000826:	4293      	cmp	r3, r2
 8000828:	d109      	bne.n	800083e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	69fa      	ldr	r2, [r7, #28]
 8000836:	fbb2 f3f3 	udiv	r3, r2, r3
 800083a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800083c:	e00e      	b.n	800085c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	009a      	lsls	r2, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	69fa      	ldr	r2, [r7, #28]
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	84bb      	strh	r3, [r7, #36]	@ 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000854:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085a:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 800085c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800085e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000862:	2b00      	cmp	r3, #0
 8000864:	d103      	bne.n	800086e <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000866:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 800086e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	4313      	orrs	r3, r2
 8000874:	b29b      	uxth	r3, r3
 8000876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800087a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800087e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000880:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000882:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4a1e      	ldr	r2, [pc, #120]	@ (8000904 <I2C_Init+0x180>)
 800088c:	fb82 1203 	smull	r1, r2, r2, r3
 8000890:	1192      	asrs	r2, r2, #6
 8000892:	17db      	asrs	r3, r3, #31
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	b29b      	uxth	r3, r3
 8000898:	3301      	adds	r3, #1
 800089a:	b29a      	uxth	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80008a4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80008bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008be:	f423 6381 	bic.w	r3, r3, #1032	@ 0x408
 80008c2:	f023 0302 	bic.w	r3, r3, #2
 80008c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	889a      	ldrh	r2, [r3, #4]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	895b      	ldrh	r3, [r3, #10]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008d6:	4313      	orrs	r3, r2
 80008d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80008de:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	899a      	ldrh	r2, [r3, #12]
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	891b      	ldrh	r3, [r3, #8]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	811a      	strh	r2, [r3, #8]
}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	@ 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	007a1200 	.word	0x007a1200
 80008fc:	431bde83 	.word	0x431bde83
 8000900:	000186a0 	.word	0x000186a0
 8000904:	10624dd3 	.word	0x10624dd3

08000908 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d008      	beq.n	800092c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	b29b      	uxth	r3, r3
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	b29a      	uxth	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 800092a:	e007      	b.n	800093c <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	b29b      	uxth	r3, r3
 8000932:	f023 0301 	bic.w	r3, r3, #1
 8000936:	b29a      	uxth	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	801a      	strh	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d008      	beq.n	800096a <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	889b      	ldrh	r3, [r3, #4]
 800095c:	b29b      	uxth	r3, r3
 800095e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000962:	b29a      	uxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
  }
}
 8000968:	e007      	b.n	800097a <I2C_DMACmd+0x34>
    I2Cx->CR2 &= CR2_DMAEN_Reset;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	889b      	ldrh	r3, [r3, #4]
 800096e:	b29b      	uxth	r3, r3
 8000970:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000974:	b29a      	uxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	809a      	strh	r2, [r3, #4]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d008      	beq.n	80009a8 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 80009a6:	e007      	b.n	80009b8 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	801a      	strh	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	460b      	mov	r3, r1
 80009cc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d008      	beq.n	80009e6 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009de:	b29a      	uxth	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 80009e4:	e007      	b.n	80009f6 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	801a      	strh	r2, [r3, #0]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000a10:	78bb      	ldrb	r3, [r7, #2]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d004      	beq.n	8000a20 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	70fb      	strb	r3, [r7, #3]
 8000a1e:	e003      	b.n	8000a28 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	f023 0301 	bic.w	r3, r3, #1
 8000a26:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	821a      	strh	r2, [r3, #16]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b087      	sub	sp, #28
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000a50:	2300      	movs	r3, #0
 8000a52:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	8a9b      	ldrh	r3, [r3, #20]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	8b1b      	ldrh	r3, [r3, #24]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000a74:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d102      	bne.n	8000a88 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000a82:	2301      	movs	r3, #1
 8000a84:	75fb      	strb	r3, [r7, #23]
 8000a86:	e001      	b.n	8000a8c <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	371c      	adds	r7, #28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	0f1b      	lsrs	r3, r3, #28
 8000ab6:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000abe:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3314      	adds	r3, #20
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e005      	b.n	8000ada <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	0c1b      	lsrs	r3, r3, #16
 8000ad2:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3318      	adds	r3, #24
 8000ad8:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	75fb      	strb	r3, [r7, #23]
 8000aea:	e001      	b.n	8000af0 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	371c      	adds	r7, #28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000b14:	4b4f      	ldr	r3, [pc, #316]	@ (8000c54 <RCC_GetClocksFreq+0x158>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 030c 	and.w	r3, r3, #12
 8000b1c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d011      	beq.n	8000b48 <RCC_GetClocksFreq+0x4c>
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	d83a      	bhi.n	8000ba0 <RCC_GetClocksFreq+0xa4>
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <RCC_GetClocksFreq+0x3c>
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d004      	beq.n	8000b40 <RCC_GetClocksFreq+0x44>
 8000b36:	e033      	b.n	8000ba0 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a47      	ldr	r2, [pc, #284]	@ (8000c58 <RCC_GetClocksFreq+0x15c>)
 8000b3c:	601a      	str	r2, [r3, #0]
      break;
 8000b3e:	e033      	b.n	8000ba8 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a45      	ldr	r2, [pc, #276]	@ (8000c58 <RCC_GetClocksFreq+0x15c>)
 8000b44:	601a      	str	r2, [r3, #0]
      break;
 8000b46:	e02f      	b.n	8000ba8 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000b48:	4b42      	ldr	r3, [pc, #264]	@ (8000c54 <RCC_GetClocksFreq+0x158>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000b50:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000b52:	4b40      	ldr	r3, [pc, #256]	@ (8000c54 <RCC_GetClocksFreq+0x158>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b5a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	0c9b      	lsrs	r3, r3, #18
 8000b60:	3302      	adds	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d106      	bne.n	8000b78 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	4a3b      	ldr	r2, [pc, #236]	@ (8000c5c <RCC_GetClocksFreq+0x160>)
 8000b6e:	fb03 f202 	mul.w	r2, r3, r2
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000b76:	e017      	b.n	8000ba8 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000b78:	4b36      	ldr	r3, [pc, #216]	@ (8000c54 <RCC_GetClocksFreq+0x158>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4a35      	ldr	r2, [pc, #212]	@ (8000c5c <RCC_GetClocksFreq+0x160>)
 8000b88:	fb03 f202 	mul.w	r2, r3, r2
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	601a      	str	r2, [r3, #0]
      break;
 8000b90:	e00a      	b.n	8000ba8 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	4a30      	ldr	r2, [pc, #192]	@ (8000c58 <RCC_GetClocksFreq+0x15c>)
 8000b96:	fb03 f202 	mul.w	r2, r3, r2
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	601a      	str	r2, [r3, #0]
      break;
 8000b9e:	e003      	b.n	8000ba8 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c58 <RCC_GetClocksFreq+0x15c>)
 8000ba4:	601a      	str	r2, [r3, #0]
      break;
 8000ba6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <RCC_GetClocksFreq+0x158>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000bb0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	091b      	lsrs	r3, r3, #4
 8000bb6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000bb8:	4a29      	ldr	r2, [pc, #164]	@ (8000c60 <RCC_GetClocksFreq+0x164>)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	40da      	lsrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000bd0:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <RCC_GetClocksFreq+0x158>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000bd8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000be0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c60 <RCC_GetClocksFreq+0x164>)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	40da      	lsrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <RCC_GetClocksFreq+0x158>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8000c00:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	0adb      	lsrs	r3, r3, #11
 8000c06:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000c08:	4a15      	ldr	r2, [pc, #84]	@ (8000c60 <RCC_GetClocksFreq+0x164>)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	40da      	lsrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <RCC_GetClocksFreq+0x158>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c28:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	0b9b      	lsrs	r3, r3, #14
 8000c2e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000c30:	4a0c      	ldr	r2, [pc, #48]	@ (8000c64 <RCC_GetClocksFreq+0x168>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	611a      	str	r2, [r3, #16]
}
 8000c4a:	bf00      	nop
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	007a1200 	.word	0x007a1200
 8000c5c:	003d0900 	.word	0x003d0900
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000010 	.word	0x20000010

08000c68 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */

  if (NewState != DISABLE)
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <RCC_AHBPeriphClockCmd+0x38>)
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <RCC_AHBPeriphClockCmd+0x38>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000c86:	e006      	b.n	8000c96 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <RCC_AHBPeriphClockCmd+0x38>)
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4903      	ldr	r1, [pc, #12]	@ (8000ca0 <RCC_AHBPeriphClockCmd+0x38>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	614b      	str	r3, [r1, #20]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d006      	beq.n	8000cc4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <RCC_APB2PeriphClockCmd+0x38>)
 8000cb8:	699a      	ldr	r2, [r3, #24]
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <RCC_APB2PeriphClockCmd+0x38>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000cc2:	e006      	b.n	8000cd2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <RCC_APB2PeriphClockCmd+0x38>)
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	4903      	ldr	r1, [pc, #12]	@ (8000cdc <RCC_APB2PeriphClockCmd+0x38>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	618b      	str	r3, [r1, #24]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <RCC_APB1PeriphClockCmd+0x38>)
 8000cf4:	69da      	ldr	r2, [r3, #28]
 8000cf6:	4908      	ldr	r1, [pc, #32]	@ (8000d18 <RCC_APB1PeriphClockCmd+0x38>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000cfe:	e006      	b.n	8000d0e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <RCC_APB1PeriphClockCmd+0x38>)
 8000d02:	69da      	ldr	r2, [r3, #28]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	4903      	ldr	r1, [pc, #12]	@ (8000d18 <RCC_APB1PeriphClockCmd+0x38>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61cb      	str	r3, [r1, #28]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000

08000d1c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <PendSV_Handler>:
  * @brief  This function handles PendSV_Handler exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8000d70:	f000 f9f2 	bl	8001158 <TimingDelay_Decrement>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <USART1_IRQHandler>:
  * @brief  This function handles USARTy global interrupt request.
  * @param  None
  * @retval None
  */
void USART1_IRQHandler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0


}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <USART2_IRQHandler>:
  * @brief  This function handles USARTz global interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <DMA1_Channel6_IRQHandler>:



void DMA1_Channel6_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */ 
  if(DMA_GetFlagStatus(I2C_DMA_FLAG_TX_TC) != RESET)
 8000d94:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000d98:	f7ff fbf6 	bl	8000588 <DMA_GetFlagStatus>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d029      	beq.n	8000df6 <DMA1_Channel6_IRQHandler+0x66>
  {  
    /* Disable the DMA Tx Channel and Clear all its Flags */  
    DMA_Cmd(I2C_DMA_CHANNEL_TX, DISABLE);
 8000da2:	2100      	movs	r1, #0
 8000da4:	4815      	ldr	r0, [pc, #84]	@ (8000dfc <DMA1_Channel6_IRQHandler+0x6c>)
 8000da6:	f7ff fbb5 	bl	8000514 <DMA_Cmd>
    DMA_ClearFlag(I2C_DMA_FLAG_TX_GL);
 8000daa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000dae:	f7ff fc13 	bl	80005d8 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    Timeout = I2C_TIMEOUT;
 8000db2:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <DMA1_Channel6_IRQHandler+0x70>)
 8000db4:	22a0      	movs	r2, #160	@ 0xa0
 8000db6:	701a      	strb	r2, [r3, #0]
    while(!I2C_GetFlagStatus(LCD_I2C, I2C_FLAG_BTF))
 8000db8:	e00a      	b.n	8000dd0 <DMA1_Channel6_IRQHandler+0x40>
    {
      if((Timeout--) == 0) TIMEOUT_UserCallback();
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <DMA1_Channel6_IRQHandler+0x70>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	b2d1      	uxtb	r1, r2
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e00 <DMA1_Channel6_IRQHandler+0x70>)
 8000dc6:	7011      	strb	r1, [r2, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <DMA1_Channel6_IRQHandler+0x40>
 8000dcc:	f000 fa94 	bl	80012f8 <TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(LCD_I2C, I2C_FLAG_BTF))
 8000dd0:	490c      	ldr	r1, [pc, #48]	@ (8000e04 <DMA1_Channel6_IRQHandler+0x74>)
 8000dd2:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <DMA1_Channel6_IRQHandler+0x78>)
 8000dd4:	f7ff fe60 	bl	8000a98 <I2C_GetFlagStatus>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0ed      	beq.n	8000dba <DMA1_Channel6_IRQHandler+0x2a>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(LCD_I2C, ENABLE);
 8000dde:	2101      	movs	r1, #1
 8000de0:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <DMA1_Channel6_IRQHandler+0x78>)
 8000de2:	f7ff fdee 	bl	80009c2 <I2C_GenerateSTOP>
    
    /* Perform a read on SR1 and SR2 register to clear eventualaly pending flags */
    (void)LCD_I2C->SR1;
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <DMA1_Channel6_IRQHandler+0x78>)
 8000de8:	8a9b      	ldrh	r3, [r3, #20]
    (void)LCD_I2C->SR2;
 8000dea:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <DMA1_Channel6_IRQHandler+0x78>)
 8000dec:	8b1b      	ldrh	r3, [r3, #24]
    
    /* Reset the variable holding the number of data to be written */
    *DataWritePointer = 0;  
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <DMA1_Channel6_IRQHandler+0x7c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2200      	movs	r2, #0
 8000df4:	801a      	strh	r2, [r3, #0]
  }
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	4002006c 	.word	0x4002006c
 8000e00:	20000014 	.word	0x20000014
 8000e04:	10000004 	.word	0x10000004
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	2000006c 	.word	0x2000006c

08000e10 <DMA1_Channel7_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(I2C_DMA_FLAG_RX_TC) != RESET)
 8000e14:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000e18:	f7ff fbb6 	bl	8000588 <DMA_GetFlagStatus>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00f      	beq.n	8000e42 <DMA1_Channel7_IRQHandler+0x32>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(LCD_I2C, ENABLE);    
 8000e22:	2101      	movs	r1, #1
 8000e24:	4808      	ldr	r0, [pc, #32]	@ (8000e48 <DMA1_Channel7_IRQHandler+0x38>)
 8000e26:	f7ff fdcc 	bl	80009c2 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Channel and Clear all its Flags */  
    DMA_Cmd(I2C_DMA_CHANNEL_RX, DISABLE);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <DMA1_Channel7_IRQHandler+0x3c>)
 8000e2e:	f7ff fb71 	bl	8000514 <DMA_Cmd>
    DMA_ClearFlag(I2C_DMA_FLAG_RX_GL);
 8000e32:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000e36:	f7ff fbcf 	bl	80005d8 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *DataReadPointer = 0;
 8000e3a:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <DMA1_Channel7_IRQHandler+0x40>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	801a      	strh	r2, [r3, #0]
  }
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	40020080 	.word	0x40020080
 8000e50:	20000068 	.word	0x20000068

08000e54 <LowLevel_DMAConfig>:


DMA_InitTypeDef   DMA_InitStructure; 

void LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == DIRECTION_TX)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10d      	bne.n	8000e82 <LowLevel_DMAConfig+0x2e>
  {
    /* Configure the DMA Tx Channel with the buffer address and the buffer size */
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
 8000e66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea4 <LowLevel_DMAConfig+0x50>)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;    
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <LowLevel_DMAConfig+0x50>)
 8000e6e:	2210      	movs	r2, #16
 8000e70:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 8000e72:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea4 <LowLevel_DMAConfig+0x50>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
    DMA_Init(I2C_DMA_CHANNEL_TX, &DMA_InitStructure);  
 8000e78:	490a      	ldr	r1, [pc, #40]	@ (8000ea4 <LowLevel_DMAConfig+0x50>)
 8000e7a:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <LowLevel_DMAConfig+0x54>)
 8000e7c:	f7ff fb0c 	bl	8000498 <DMA_Init>
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
    DMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
    DMA_Init(I2C_DMA_CHANNEL_RX, &DMA_InitStructure);    
  }
}
 8000e80:	e00c      	b.n	8000e9c <LowLevel_DMAConfig+0x48>
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)pBuffer;
 8000e82:	4a08      	ldr	r2, [pc, #32]	@ (8000ea4 <LowLevel_DMAConfig+0x50>)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <LowLevel_DMAConfig+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 8000e8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <LowLevel_DMAConfig+0x50>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
    DMA_Init(I2C_DMA_CHANNEL_RX, &DMA_InitStructure);    
 8000e94:	4903      	ldr	r1, [pc, #12]	@ (8000ea4 <LowLevel_DMAConfig+0x50>)
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <LowLevel_DMAConfig+0x58>)
 8000e98:	f7ff fafe 	bl	8000498 <DMA_Init>
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000038 	.word	0x20000038
 8000ea8:	4002006c 	.word	0x4002006c
 8000eac:	40020080 	.word	0x40020080

08000eb0 <DMA_I2C_Init>:

void DMA_I2C_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* I2C TX DMA Channel configuration */
  DMA_DeInit(I2C_DMA_CHANNEL_TX);
 8000eb4:	481e      	ldr	r0, [pc, #120]	@ (8000f30 <DMA_I2C_Init+0x80>)
 8000eb6:	f7ff fa33 	bl	8000320 <DMA_DeInit>
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)I2C_DR_Address;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8000f38 <DMA_I2C_Init+0x88>)
 8000ebe:	601a      	str	r2, [r3, #0]
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)0;   /* This parameter will be configured durig communication */
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;    /* This parameter will be configured durig communication */
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000ec8:	2210      	movs	r2, #16
 8000eca:	609a      	str	r2, [r3, #8]
  DMA_InitStructure.DMA_BufferSize = 0xFFFF;            /* This parameter will be configured durig communication */
 8000ecc:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000ece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ed2:	60da      	str	r2, [r3, #12]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000edc:	2280      	movs	r2, #128	@ 0x80
 8000ede:	615a      	str	r2, [r3, #20]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_MemoryDataSize_Byte;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000ef4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
  DMA_Init(I2C_DMA_CHANNEL_TX, &DMA_InitStructure);  
 8000f00:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000f02:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <DMA_I2C_Init+0x80>)
 8000f04:	f7ff fac8 	bl	8000498 <DMA_Init>
  
  /* I2C RX DMA Channel configuration */
  DMA_DeInit(I2C_DMA_CHANNEL_RX);
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <DMA_I2C_Init+0x8c>)
 8000f0a:	f7ff fa09 	bl	8000320 <DMA_DeInit>
  DMA_Init(I2C_DMA_CHANNEL_RX, &DMA_InitStructure);  
 8000f0e:	4909      	ldr	r1, [pc, #36]	@ (8000f34 <DMA_I2C_Init+0x84>)
 8000f10:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <DMA_I2C_Init+0x8c>)
 8000f12:	f7ff fac1 	bl	8000498 <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(I2C_DMA_CHANNEL_TX, DMA_IT_TC, ENABLE);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <DMA_I2C_Init+0x80>)
 8000f1c:	f7ff fb16 	bl	800054c <DMA_ITConfig>
  DMA_ITConfig(I2C_DMA_CHANNEL_RX, DMA_IT_TC, ENABLE);    
 8000f20:	2201      	movs	r2, #1
 8000f22:	2102      	movs	r1, #2
 8000f24:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <DMA_I2C_Init+0x8c>)
 8000f26:	f7ff fb11 	bl	800054c <DMA_ITConfig>
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	4002006c 	.word	0x4002006c
 8000f34:	20000038 	.word	0x20000038
 8000f38:	40005410 	.word	0x40005410
 8000f3c:	40020080 	.word	0x40020080

08000f40 <GPIO_I2C_Init>:
#include "Gpio_midderware.h"

void GPIO_I2C_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
    /*!< GPIO configuration */  
    /*!< Configure I2C pins: SCL */
    GPIO_InitStructure.GPIO_Pin = I2C_SCL_PIN;
 8000f46:	2340      	movs	r3, #64	@ 0x40
 8000f48:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8000f4e:	231c      	movs	r3, #28
 8000f50:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4807      	ldr	r0, [pc, #28]	@ (8000f74 <GPIO_I2C_Init+0x34>)
 8000f58:	f7ff fb58 	bl	800060c <GPIO_Init>

    /*!< Configure I2C pins: SDA */
    GPIO_InitStructure.GPIO_Pin = I2C_SDA_PIN;
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(I2C_SDA_GPIO_PORT, &GPIO_InitStructure); 
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <GPIO_I2C_Init+0x34>)
 8000f66:	f7ff fb51 	bl	800060c <GPIO_Init>
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40010c00 	.word	0x40010c00

08000f78 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(char cmd)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f023 030f 	bic.w	r3, r3, #15
 8000f88:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f043 030c 	orr.w	r3, r3, #12
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	f043 030c 	orr.w	r3, r3, #12
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	72fb      	strb	r3, [r7, #11]

    I2C_write_LCD(data_t, 4);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f91e 	bl	8001200 <I2C_write_LCD>
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(char data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f023 030f 	bic.w	r3, r3, #15
 8000fdc:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 030d 	orr.w	r3, r3, #13
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0309 	orr.w	r3, r3, #9
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	f043 030d 	orr.w	r3, r3, #13
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	f043 0309 	orr.w	r3, r3, #9
 8001008:	b2db      	uxtb	r3, r3
 800100a:	72fb      	strb	r3, [r7, #11]

    I2C_write_LCD(data_t, 4);
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2104      	movs	r1, #4
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f8f4 	bl	8001200 <I2C_write_LCD>
    Delay(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f000 f889 	bl	8001130 <Delay>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(int col, int row)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
    uint8_t address;

    switch (row)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b03      	cmp	r3, #3
 8001036:	d824      	bhi.n	8001082 <lcd_gotoxy+0x5a>
 8001038:	a201      	add	r2, pc, #4	@ (adr r2, 8001040 <lcd_gotoxy+0x18>)
 800103a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103e:	bf00      	nop
 8001040:	08001051 	.word	0x08001051
 8001044:	0800105b 	.word	0x0800105b
 8001048:	08001065 	.word	0x08001065
 800104c:	0800106f 	.word	0x0800106f
    {
        case 0: address = 0x80 + col; break;  // First row
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	3b80      	subs	r3, #128	@ 0x80
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e00e      	b.n	8001078 <lcd_gotoxy+0x50>
        case 1: address = 0xC0 + col; break;  // Second row
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	3b40      	subs	r3, #64	@ 0x40
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e009      	b.n	8001078 <lcd_gotoxy+0x50>
        case 2: address = 0x94 + col; break;  // Third row
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	3b6c      	subs	r3, #108	@ 0x6c
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e004      	b.n	8001078 <lcd_gotoxy+0x50>
        case 3: address = 0xD4 + col; break;  // Fourth row
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	3b2c      	subs	r3, #44	@ 0x2c
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	bf00      	nop
        default: return;  // Ignore invalid row numbers
    }

    lcd_send_cmd(address);  // Send command to move the cursor
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff7c 	bl	8000f78 <lcd_send_cmd>
 8001080:	e000      	b.n	8001084 <lcd_gotoxy+0x5c>
        default: return;  // Ignore invalid row numbers
 8001082:	bf00      	nop
}
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop

0800108c <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    Delay(50);  // Wait for LCD power-up
 8001090:	2032      	movs	r0, #50	@ 0x32
 8001092:	f000 f84d 	bl	8001130 <Delay>
    lcd_send_cmd(0x30);  // Wake up command
 8001096:	2030      	movs	r0, #48	@ 0x30
 8001098:	f7ff ff6e 	bl	8000f78 <lcd_send_cmd>
    Delay(5);
 800109c:	2005      	movs	r0, #5
 800109e:	f000 f847 	bl	8001130 <Delay>
    lcd_send_cmd(0x30);  // Wake up command
 80010a2:	2030      	movs	r0, #48	@ 0x30
 80010a4:	f7ff ff68 	bl	8000f78 <lcd_send_cmd>
    Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 f841 	bl	8001130 <Delay>
    lcd_send_cmd(0x30);  // Wake up command
 80010ae:	2030      	movs	r0, #48	@ 0x30
 80010b0:	f7ff ff62 	bl	8000f78 <lcd_send_cmd>
    Delay(10);
 80010b4:	200a      	movs	r0, #10
 80010b6:	f000 f83b 	bl	8001130 <Delay>
    lcd_send_cmd(0x20);  // Set to 4-bit mode
 80010ba:	2020      	movs	r0, #32
 80010bc:	f7ff ff5c 	bl	8000f78 <lcd_send_cmd>
    Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f000 f835 	bl	8001130 <Delay>

    // LCD configuration commands
    lcd_send_cmd(0x28);  // 4-bit mode, 2 lines, 5x8 font
 80010c6:	2028      	movs	r0, #40	@ 0x28
 80010c8:	f7ff ff56 	bl	8000f78 <lcd_send_cmd>
    Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 f82f 	bl	8001130 <Delay>
    lcd_send_cmd(0x08);  // Display off, cursor off, blink off
 80010d2:	2008      	movs	r0, #8
 80010d4:	f7ff ff50 	bl	8000f78 <lcd_send_cmd>
    Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 f829 	bl	8001130 <Delay>
    lcd_send_cmd(0x01);  // Clear display
 80010de:	2001      	movs	r0, #1
 80010e0:	f7ff ff4a 	bl	8000f78 <lcd_send_cmd>
    Delay(10);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f000 f823 	bl	8001130 <Delay>
    lcd_send_cmd(0x06);  // Entry mode: cursor moves right
 80010ea:	2006      	movs	r0, #6
 80010ec:	f7ff ff44 	bl	8000f78 <lcd_send_cmd>
    Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f000 f81d 	bl	8001130 <Delay>
    lcd_send_cmd(0x0C);  // Display on, cursor off, blink off
 80010f6:	200c      	movs	r0, #12
 80010f8:	f7ff ff3e 	bl	8000f78 <lcd_send_cmd>
    Delay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 f817 	bl	8001130 <Delay>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}

08001106 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(char *str)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
    // uint16_t length = strlen(str);
    // for(uint16_t i = 0; i < length; i++)
    // {
    //     lcd_send_data(str[i]);
    // }
    while (*str) lcd_send_data(*str++);  // Send each character in the string
 800110e:	e006      	b.n	800111e <lcd_puts+0x18>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff57 	bl	8000fcc <lcd_send_data>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f4      	bne.n	8001110 <lcd_puts+0xa>

}
 8001126:	bf00      	nop
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <Delay>:
}



void Delay(__IO uint32_t nTime)
{ 
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <Delay+0x24>)
 800113c:	6013      	str	r3, [r2, #0]

  while(TimingDelay != 0);
 800113e:	bf00      	nop
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <Delay+0x24>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1fb      	bne.n	8001140 <Delay+0x10>
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	20000064 	.word	0x20000064

08001158 <TimingDelay_Decrement>:
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <TimingDelay_Decrement+0x20>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <TimingDelay_Decrement+0x16>
  { 
    TimingDelay--;
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <TimingDelay_Decrement+0x20>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3b01      	subs	r3, #1
 800116a:	4a03      	ldr	r2, [pc, #12]	@ (8001178 <TimingDelay_Decrement+0x20>)
 800116c:	6013      	str	r3, [r2, #0]
  }
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000064 	.word	0x20000064

0800117c <I2C_DMA_LowLevel_Init>:

void TIMEOUT_UserCallback(void);
static void HAL_Delay_ms(uint16_t delay);

static void I2C_DMA_LowLevel_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    
  /*!< I2C_SCL_GPIO_CLK and I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_APB2PeriphClockCmd(I2C_SCL_GPIO_CLK | I2C_SDA_GPIO_CLK, ENABLE);
 8001180:	2101      	movs	r1, #1
 8001182:	2008      	movs	r0, #8
 8001184:	f7ff fd8e 	bl	8000ca4 <RCC_APB2PeriphClockCmd>

  /*!< I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(I2C_CLK, ENABLE);
 8001188:	2101      	movs	r1, #1
 800118a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800118e:	f7ff fda7 	bl	8000ce0 <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  GPIO_I2C_Init();
 8001192:	f7ff fed5 	bl	8000f40 <GPIO_I2C_Init>
 /* config interrupt TX, RX DMA for i2c */
  Nvic_I2C_DMA();
 8001196:	f000 f8b3 	bl	8001300 <Nvic_I2C_DMA>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHBPeriphClockCmd(I2C_DMA_CLK, ENABLE);
 800119a:	2101      	movs	r1, #1
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff fd63 	bl	8000c68 <RCC_AHBPeriphClockCmd>
  /* config DMA TX, RX channnel*/
  DMA_I2C_Init(); 
 80011a2:	f7ff fe85 	bl	8000eb0 <DMA_I2C_Init>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <I2c_Midderware_Init>:


void I2c_Midderware_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
    I2C_InitTypeDef  I2C_InitStructure;
  
    I2C_DMA_LowLevel_Init();
 80011b2:	f7ff ffe3 	bl	800117c <I2C_DMA_LowLevel_Init>
    
    /*!< I2C configuration */
    /* I2C configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80011b6:	2300      	movs	r3, #0
 80011b8:	80bb      	strh	r3, [r7, #4]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80011ba:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 80011be:	80fb      	strh	r3, [r7, #6]
    I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
 80011c0:	234e      	movs	r3, #78	@ 0x4e
 80011c2:	813b      	strh	r3, [r7, #8]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80011c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011c8:	817b      	strh	r3, [r7, #10]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80011ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011ce:	81bb      	strh	r3, [r7, #12]
    I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <I2c_Midderware_Init+0x4c>)
 80011d2:	603b      	str	r3, [r7, #0]
    
    /* I2C Peripheral Enable */
    I2C_Cmd(LCD_I2C, ENABLE);
 80011d4:	2101      	movs	r1, #1
 80011d6:	4809      	ldr	r0, [pc, #36]	@ (80011fc <I2c_Midderware_Init+0x50>)
 80011d8:	f7ff fb96 	bl	8000908 <I2C_Cmd>
    /* Apply I2C configuration after enabling it */
    I2C_Init(LCD_I2C, &I2C_InitStructure);
 80011dc:	463b      	mov	r3, r7
 80011de:	4619      	mov	r1, r3
 80011e0:	4806      	ldr	r0, [pc, #24]	@ (80011fc <I2c_Midderware_Init+0x50>)
 80011e2:	f7ff facf 	bl	8000784 <I2C_Init>

    /* Enable the I2C peripheral DMA requests */
    I2C_DMACmd(LCD_I2C, ENABLE);
 80011e6:	2101      	movs	r1, #1
 80011e8:	4804      	ldr	r0, [pc, #16]	@ (80011fc <I2c_Midderware_Init+0x50>)
 80011ea:	f7ff fbac 	bl	8000946 <I2C_DMACmd>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	00030d40 	.word	0x00030d40
 80011fc:	40005400 	.word	0x40005400

08001200 <I2C_write_LCD>:

}


void I2C_write_LCD(uint8_t* pBuffer, uint16_t NumByteToWrite)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
    *DataWritePointer = NumByteToWrite;  
 800120c:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <I2C_write_LCD+0xe0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	887a      	ldrh	r2, [r7, #2]
 8001212:	801a      	strh	r2, [r3, #0]
  
  /*!< While the bus is busy */
  Timeout = I2C_TIMEOUT;
 8001214:	4b33      	ldr	r3, [pc, #204]	@ (80012e4 <I2C_write_LCD+0xe4>)
 8001216:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 800121a:	801a      	strh	r2, [r3, #0]
  while(I2C_GetFlagStatus(LCD_I2C, I2C_FLAG_BUSY))
 800121c:	e00b      	b.n	8001236 <I2C_write_LCD+0x36>
  {
    if((Timeout--) == 0) return TIMEOUT_UserCallback();
 800121e:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <I2C_write_LCD+0xe4>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	b291      	uxth	r1, r2
 8001228:	4a2e      	ldr	r2, [pc, #184]	@ (80012e4 <I2C_write_LCD+0xe4>)
 800122a:	8011      	strh	r1, [r2, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <I2C_write_LCD+0x36>
 8001230:	f000 f862 	bl	80012f8 <TIMEOUT_UserCallback>
 8001234:	e051      	b.n	80012da <I2C_write_LCD+0xda>
  while(I2C_GetFlagStatus(LCD_I2C, I2C_FLAG_BUSY))
 8001236:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800123a:	482b      	ldr	r0, [pc, #172]	@ (80012e8 <I2C_write_LCD+0xe8>)
 800123c:	f7ff fc2c 	bl	8000a98 <I2C_GetFlagStatus>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1eb      	bne.n	800121e <I2C_write_LCD+0x1e>
  }
  
  /*!< Send START condition */
  I2C_GenerateSTART(LCD_I2C, ENABLE);
 8001246:	2101      	movs	r1, #1
 8001248:	4827      	ldr	r0, [pc, #156]	@ (80012e8 <I2C_write_LCD+0xe8>)
 800124a:	f7ff fb9b 	bl	8000984 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it */
  Timeout = I2C_TIMEOUT;
 800124e:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <I2C_write_LCD+0xe4>)
 8001250:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 8001254:	801a      	strh	r2, [r3, #0]
  while(!I2C_CheckEvent(LCD_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8001256:	e00b      	b.n	8001270 <I2C_write_LCD+0x70>
  {
    if((Timeout--) == 0) return TIMEOUT_UserCallback();
 8001258:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <I2C_write_LCD+0xe4>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	1e5a      	subs	r2, r3, #1
 8001260:	b291      	uxth	r1, r2
 8001262:	4a20      	ldr	r2, [pc, #128]	@ (80012e4 <I2C_write_LCD+0xe4>)
 8001264:	8011      	strh	r1, [r2, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <I2C_write_LCD+0x70>
 800126a:	f000 f845 	bl	80012f8 <TIMEOUT_UserCallback>
 800126e:	e034      	b.n	80012da <I2C_write_LCD+0xda>
  while(!I2C_CheckEvent(LCD_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8001270:	491e      	ldr	r1, [pc, #120]	@ (80012ec <I2C_write_LCD+0xec>)
 8001272:	481d      	ldr	r0, [pc, #116]	@ (80012e8 <I2C_write_LCD+0xe8>)
 8001274:	f7ff fbe1 	bl	8000a3a <I2C_CheckEvent>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0ec      	beq.n	8001258 <I2C_write_LCD+0x58>
  }
  
  /*!< Send LCD address for write */
  Timeout = I2C_TIMEOUT;
 800127e:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <I2C_write_LCD+0xe4>)
 8001280:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 8001284:	801a      	strh	r2, [r3, #0]
  I2C_Send7bitAddress(LCD_I2C, I2C_SLAVE_ADDRESS7, I2C_Direction_Transmitter);
 8001286:	2200      	movs	r2, #0
 8001288:	214e      	movs	r1, #78	@ 0x4e
 800128a:	4817      	ldr	r0, [pc, #92]	@ (80012e8 <I2C_write_LCD+0xe8>)
 800128c:	f7ff fbb8 	bl	8000a00 <I2C_Send7bitAddress>

  /*!< Test on EV6 and clear it */
  Timeout = I2C_TIMEOUT;
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <I2C_write_LCD+0xe4>)
 8001292:	f248 62a0 	movw	r2, #34464	@ 0x86a0
 8001296:	801a      	strh	r2, [r3, #0]
  while(!I2C_CheckEvent(LCD_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001298:	e00b      	b.n	80012b2 <I2C_write_LCD+0xb2>
  {
    if((Timeout--) == 0) return TIMEOUT_UserCallback();
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <I2C_write_LCD+0xe4>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	b291      	uxth	r1, r2
 80012a4:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <I2C_write_LCD+0xe4>)
 80012a6:	8011      	strh	r1, [r2, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <I2C_write_LCD+0xb2>
 80012ac:	f000 f824 	bl	80012f8 <TIMEOUT_UserCallback>
 80012b0:	e013      	b.n	80012da <I2C_write_LCD+0xda>
  while(!I2C_CheckEvent(LCD_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80012b2:	490f      	ldr	r1, [pc, #60]	@ (80012f0 <I2C_write_LCD+0xf0>)
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <I2C_write_LCD+0xe8>)
 80012b6:	f7ff fbc0 	bl	8000a3a <I2C_CheckEvent>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0ec      	beq.n	800129a <I2C_write_LCD+0x9a>
  }

  
  /* Configure the DMA Tx Channel with the buffer address and the buffer size */
  LowLevel_DMAConfig((uint32_t)pBuffer, (uint8_t)(NumByteToWrite), DIRECTION_TX);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	4611      	mov	r1, r2
 80012c8:	2200      	movs	r2, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fdc2 	bl	8000e54 <LowLevel_DMAConfig>
    
  /* Enable the DMA Tx Channel */
  DMA_Cmd(I2C_DMA_CHANNEL_TX, ENABLE);
 80012d0:	2101      	movs	r1, #1
 80012d2:	4808      	ldr	r0, [pc, #32]	@ (80012f4 <I2C_write_LCD+0xf4>)
 80012d4:	f7ff f91e 	bl	8000514 <DMA_Cmd>
  
  /* If all operations OK, return STATUS_OK (0) */
  return STATUS_OK;
 80012d8:	bf00      	nop

}
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000006c 	.word	0x2000006c
 80012e4:	20000014 	.word	0x20000014
 80012e8:	40005400 	.word	0x40005400
 80012ec:	00030001 	.word	0x00030001
 80012f0:	00070082 	.word	0x00070082
 80012f4:	4002006c 	.word	0x4002006c

080012f8 <TIMEOUT_UserCallback>:




void TIMEOUT_UserCallback(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    while(1);
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <TIMEOUT_UserCallback+0x4>

08001300 <Nvic_I2C_DMA>:
#include "Nvic_midderware.h"


void Nvic_I2C_DMA(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

    NVIC_InitTypeDef NVIC_InitStructure;  
    /* Configure and enable I2C DMA TX Channel interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = I2C_DMA_TX_IRQn;
 8001306:	2310      	movs	r3, #16
 8001308:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = I2C_DMA_PREPRIO;
 800130a:	230f      	movs	r3, #15
 800130c:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = I2C_DMA_SUBPRIO;
 800130e:	230f      	movs	r3, #15
 8001310:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001312:	2301      	movs	r3, #1
 8001314:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4618      	mov	r0, r3
 800131a:	f7fe ff9f 	bl	800025c <NVIC_Init>

    /* Configure and enable I2C DMA RX Channel interrupt */
    NVIC_InitStructure.NVIC_IRQChannel = I2C_DMA_RX_IRQn;
 800131e:	2311      	movs	r3, #17
 8001320:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = I2C_DMA_PREPRIO;
 8001322:	230f      	movs	r3, #15
 8001324:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = I2C_DMA_SUBPRIO;
 8001326:	230f      	movs	r3, #15
 8001328:	71bb      	strb	r3, [r7, #6]
    NVIC_Init(&NVIC_InitStructure);  
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ff95 	bl	800025c <NVIC_Init>
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <main>:
 */

#include <stdint.h>

int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    Init_LCD();
 8001340:	f7fe ff62 	bl	8000208 <Init_LCD>
    display("khanh tran van");
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <main+0x14>)
 8001346:	f7fe ff79 	bl	800023c <display>
    while(1);
 800134a:	bf00      	nop
 800134c:	e7fd      	b.n	800134a <main+0xe>
 800134e:	bf00      	nop
 8001350:	0800157c 	.word	0x0800157c

08001354 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <SystemInit+0x5c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <SystemInit+0x5c>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <SystemInit+0x5c>)
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4911      	ldr	r1, [pc, #68]	@ (80013b0 <SystemInit+0x5c>)
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <SystemInit+0x60>)
 800136c:	4013      	ands	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <SystemInit+0x5c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0e      	ldr	r2, [pc, #56]	@ (80013b0 <SystemInit+0x5c>)
 8001376:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800137a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800137e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <SystemInit+0x5c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <SystemInit+0x5c>)
 8001386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800138a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <SystemInit+0x5c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4a07      	ldr	r2, [pc, #28]	@ (80013b0 <SystemInit+0x5c>)
 8001392:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8001396:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <SystemInit+0x5c>)
 800139a:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 800139e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80013a0:	f000 f80c 	bl	80013bc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <SystemInit+0x64>)
 80013a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000
 80013b4:	f8ff0000 	.word	0xf8ff0000
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80013c0:	f000 f802 	bl	80013c8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80013d6:	4b3a      	ldr	r3, [pc, #232]	@ (80014c0 <SetSysClockTo72+0xf8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a39      	ldr	r2, [pc, #228]	@ (80014c0 <SetSysClockTo72+0xf8>)
 80013dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80013e2:	4b37      	ldr	r3, [pc, #220]	@ (80014c0 <SetSysClockTo72+0xf8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3301      	adds	r3, #1
 80013f0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <SetSysClockTo72+0x38>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80013fe:	d1f0      	bne.n	80013e2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001400:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <SetSysClockTo72+0xf8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800140c:	2301      	movs	r3, #1
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	e001      	b.n	8001416 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d14b      	bne.n	80014b4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800141c:	4b29      	ldr	r3, [pc, #164]	@ (80014c4 <SetSysClockTo72+0xfc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <SetSysClockTo72+0xfc>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001428:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <SetSysClockTo72+0xfc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a25      	ldr	r2, [pc, #148]	@ (80014c4 <SetSysClockTo72+0xfc>)
 800142e:	f023 0303 	bic.w	r3, r3, #3
 8001432:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001434:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <SetSysClockTo72+0xfc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a22      	ldr	r2, [pc, #136]	@ (80014c4 <SetSysClockTo72+0xfc>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001440:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <SetSysClockTo72+0xf8>)
 8001442:	4a1f      	ldr	r2, [pc, #124]	@ (80014c0 <SetSysClockTo72+0xf8>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <SetSysClockTo72+0xf8>)
 800144a:	4a1d      	ldr	r2, [pc, #116]	@ (80014c0 <SetSysClockTo72+0xf8>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <SetSysClockTo72+0xf8>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a1a      	ldr	r2, [pc, #104]	@ (80014c0 <SetSysClockTo72+0xf8>)
 8001456:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800145a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <SetSysClockTo72+0xf8>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <SetSysClockTo72+0xf8>)
 8001462:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001466:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <SetSysClockTo72+0xf8>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a14      	ldr	r2, [pc, #80]	@ (80014c0 <SetSysClockTo72+0xf8>)
 800146e:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8001472:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <SetSysClockTo72+0xf8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <SetSysClockTo72+0xf8>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800147e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001480:	bf00      	nop
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <SetSysClockTo72+0xf8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f9      	beq.n	8001482 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <SetSysClockTo72+0xf8>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <SetSysClockTo72+0xf8>)
 8001494:	f023 0303 	bic.w	r3, r3, #3
 8001498:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <SetSysClockTo72+0xf8>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a08      	ldr	r2, [pc, #32]	@ (80014c0 <SetSysClockTo72+0xf8>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80014a6:	bf00      	nop
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <SetSysClockTo72+0xf8>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d1f9      	bne.n	80014a8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40022000 	.word	0x40022000

080014c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014c8:	480d      	ldr	r0, [pc, #52]	@ (8001500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014cc:	f7ff ff42 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	@ (8001504 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	@ (8001508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <LoopForever+0xe>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001514 <LoopForever+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014f6:	f000 f811 	bl	800151c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fa:	f7ff ff1f 	bl	800133c <main>

080014fe <LoopForever>:

LoopForever:
  b LoopForever
 80014fe:	e7fe      	b.n	80014fe <LoopForever>
  ldr   r0, =_estack
 8001500:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800150c:	08001594 	.word	0x08001594
  ldr r2, =_sbss
 8001510:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001514:	20000070 	.word	0x20000070

08001518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC1_2_IRQHandler>
	...

0800151c <__libc_init_array>:
 800151c:	b570      	push	{r4, r5, r6, lr}
 800151e:	2600      	movs	r6, #0
 8001520:	4d0c      	ldr	r5, [pc, #48]	@ (8001554 <__libc_init_array+0x38>)
 8001522:	4c0d      	ldr	r4, [pc, #52]	@ (8001558 <__libc_init_array+0x3c>)
 8001524:	1b64      	subs	r4, r4, r5
 8001526:	10a4      	asrs	r4, r4, #2
 8001528:	42a6      	cmp	r6, r4
 800152a:	d109      	bne.n	8001540 <__libc_init_array+0x24>
 800152c:	f000 f81a 	bl	8001564 <_init>
 8001530:	2600      	movs	r6, #0
 8001532:	4d0a      	ldr	r5, [pc, #40]	@ (800155c <__libc_init_array+0x40>)
 8001534:	4c0a      	ldr	r4, [pc, #40]	@ (8001560 <__libc_init_array+0x44>)
 8001536:	1b64      	subs	r4, r4, r5
 8001538:	10a4      	asrs	r4, r4, #2
 800153a:	42a6      	cmp	r6, r4
 800153c:	d105      	bne.n	800154a <__libc_init_array+0x2e>
 800153e:	bd70      	pop	{r4, r5, r6, pc}
 8001540:	f855 3b04 	ldr.w	r3, [r5], #4
 8001544:	4798      	blx	r3
 8001546:	3601      	adds	r6, #1
 8001548:	e7ee      	b.n	8001528 <__libc_init_array+0xc>
 800154a:	f855 3b04 	ldr.w	r3, [r5], #4
 800154e:	4798      	blx	r3
 8001550:	3601      	adds	r6, #1
 8001552:	e7f2      	b.n	800153a <__libc_init_array+0x1e>
 8001554:	0800158c 	.word	0x0800158c
 8001558:	0800158c 	.word	0x0800158c
 800155c:	0800158c 	.word	0x0800158c
 8001560:	08001590 	.word	0x08001590

08001564 <_init>:
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001566:	bf00      	nop
 8001568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156a:	bc08      	pop	{r3}
 800156c:	469e      	mov	lr, r3
 800156e:	4770      	bx	lr

08001570 <_fini>:
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	bf00      	nop
 8001574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001576:	bc08      	pop	{r3}
 8001578:	469e      	mov	lr, r3
 800157a:	4770      	bx	lr
